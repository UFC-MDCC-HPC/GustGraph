<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c74f48803e22768fccd6d803ac7bd52e552e424f3cdcd9282d1c6477a945dd44febf94e1697d3bd215162db18218ad8731e9df4b02b13e190920631ab0d372671f1e2f144b3128478ae6b79e7b2950cd7ac8885db64314c6d1d0cf408da58ad59fc94ab60fecb8ce917e7edcb2340e0fa2068e6780eb15c025ca0ca191f41895" isAbstract="false" kind="Synchronizer" name="SplitterImpl" packagePath="br.ufc.mdcc.hpcshelf.mapreduce.impl.connector">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="00240000048000009400000006020000002400005253413100040000110000007d28c0f038750a5f0f5a5cab521d91d94a08babb3e92b7d64dedd4f606e7e806faa2463b992699b104ac4c1650623b43c824f10e500b4fba2532151da56ddd46a152d8893501afac175acc8c5de6d1f46e19207da85b8d991facb756f8b5dc17a4a020176fb54a2a4bd54c0e1fe52c8a80f0b5734733d902b8adf61deca2c99d" localRef="base" location="br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter/Splitter.hpe" name="Splitter" package="br.ufc.mdcc.hpcshelf.mapreduce.connector" version="1.0.0.0">
        <visualDescription h="89" w="174" x="337" y="165">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="output_value_type" varName="OValue"/>
        <parameter formFieldId="bin_function" varName="BF"/>
        <parameter formFieldId="input_key_type" varName="IKey"/>
        <parameter formFieldId="input_value_type" varName="IValue"/>
        <parameter formFieldId="output_key_type" varName="OKey"/>
        <port index_replica="0" localRef="collect_pairs" location="br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBaseDirect/EnvironmentBindingBaseDirect.hpe" multiple="false" name="EnvironmentBindingBaseDirect" package="br.ufc.mdcc.hpc.storm.binding.environment" exposed="true">
          <visualDescription h="60" w="124" x="255" y="482">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="client_port_type" varName="X###189275688"/>
          <parameter formFieldId="server_port_type" varName="X###733207009"/>
          <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="client_server">
            <visualDescription h="20" w="20" x="53" y="7"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="feed_pairs" location="br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBaseDirect/EnvironmentBindingBaseDirect.hpe" multiple="false" name="EnvironmentBindingBaseDirect" package="br.ufc.mdcc.hpc.storm.binding.environment" exposed="true">
          <visualDescription h="60" w="126" x="674" y="513">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="client_port_type" varName="X###749033777"/>
          <parameter formFieldId="server_port_type" varName="X###461551325"/>
          <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="1" parallel="false" uRef="client_server">
            <visualDescription h="20" w="20" x="54" y="6"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="task_binding_split" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="83" w="228" x="321" y="347">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###582186311"/>
          <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="true" slice_replica="0" unit_replica="0" uRef="peer">
            <visualDescription h="20" w="20" x="12" y="34"/>
          </unitBounds>
          <unitBounds facet="0" facet_instance="1" facet_instance_enclosing="1" parallel="true" slice_replica="1" unit_replica="1" uRef="peer">
            <visualDescription h="20" w="20" x="181" y="36"/>
          </unitBounds>
        </port>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="true" uRef="collector">
          <visualDescription h="20" w="20" x="31" y="54"/>
        </unitBounds>
        <unitBounds facet="1" facet_instance="0" facet_instance_enclosing="1" parallel="true" uRef="feeder">
          <visualDescription h="20" w="20" x="126" y="53"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
    <facet_configuration facet="1" multiple="false"/>
  </header>
  <componentInfo>
    <innerComponent localRef="in" location="br.ufc.mdcc.common.Data/Data.hpe" multiple="false" name="Data" package="br.ufc.mdcc.common" exposed="true">
      <visualDescription h="60" w="100" x="103" y="613">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="imk" location="br.ufc.mdcc.common.Data/Data.hpe" multiple="false" name="Data" package="br.ufc.mdcc.common" exposed="false">
      <visualDescription h="60" w="100" x="107" y="694">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="imv" location="br.ufc.mdcc.common.Data/Data.hpe" multiple="false" name="Data" package="br.ufc.mdcc.common" exposed="false">
      <visualDescription h="60" w="100" x="121" y="766">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="omv" location="br.ufc.mdcc.common.Data/Data.hpe" multiple="false" name="Data" package="br.ufc.mdcc.common" exposed="false">
      <visualDescription h="60" w="100" x="252" y="777">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="omk" location="br.ufc.mdcc.common.Data/Data.hpe" multiple="false" name="Data" package="br.ufc.mdcc.common" exposed="false">
      <visualDescription h="60" w="100" x="250" y="682">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="ork" location="br.ufc.mdcc.common.Data/Data.hpe" multiple="false" name="Data" package="br.ufc.mdcc.common" exposed="false">
      <visualDescription h="60" w="100" x="387" y="686">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="orv" location="br.ufc.mdcc.common.Data/Data.hpe" multiple="false" name="Data" package="br.ufc.mdcc.common" exposed="false">
      <visualDescription h="60" w="100" x="392" y="765">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="out" location="br.ufc.mdcc.common.Data/Data.hpe" multiple="false" name="Data" package="br.ufc.mdcc.common" exposed="true">
      <visualDescription h="60" w="100" x="692" y="75">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="bf" location="br.ufc.mdcc.hpcshelf.mapreduce.custom.PartitionFunction/PartitionFunction.hpe" multiple="false" name="PartitionFunction" package="br.ufc.mdcc.hpcshelf.mapreduce.custom" exposed="false">
      <visualDescription h="60" w="100" x="416" y="741">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="input_key" varName="IKey"/>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="partition_function">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="c" location="br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator/PortTypeIterator.hpe" multiple="false" name="PortTypeIterator" package="br.ufc.mdcc.hpcshelf.mapreduce.port.environment" exposed="false">
      <visualDescription h="60" w="100" x="417" y="731">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="s" location="br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator/PortTypeIterator.hpe" multiple="false" name="PortTypeIterator" package="br.ufc.mdcc.hpcshelf.mapreduce.port.environment" exposed="false">
      <visualDescription h="60" w="100" x="529" y="734">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="maintainer_map" location="br.ufc.mdcc.hpcshelf.platform.maintainer.ComputeHost/ComputeHost.hpe" multiple="false" name="ComputeHost" package="br.ufc.mdcc.hpcshelf.platform.maintainer" exposed="false">
      <visualDescription h="60" w="100" x="69" y="193">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="compute_host">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="maintainer_reduce" location="br.ufc.mdcc.hpcshelf.platform.maintainer.ComputeHost/ComputeHost.hpe" multiple="false" name="ComputeHost" package="br.ufc.mdcc.hpcshelf.platform.maintainer" exposed="false">
      <visualDescription h="60" w="100" x="138" y="56">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="compute_host">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="in" direct="true" varName="IN"/>
    <supplyParameter cRef="out" direct="true" varName="OUT"/>
    <supplyParameter cRef="imk" direct="true" varName="IKey"/>
    <supplyParameter cRef="imv" direct="true" varName="IValue"/>
    <supplyParameter cRef="omk" direct="true" varName="TKey"/>
    <supplyParameter cRef="omv" direct="true" varName="TValue"/>
    <supplyParameter cRef="ork" direct="true" varName="OKey"/>
    <supplyParameter cRef="orv" direct="true" varName="OValue"/>
    <supplyParameter cRef="bf" direct="true" varName="BF"/>
    <supplyParameter cRef="c" direct="true" varName="C"/>
    <supplyParameter cRef="s" direct="true" varName="S"/>
    <supplyParameter cRef="maintainer_reduce" direct="true" varName="M0"/>
    <supplyParameter cRef="maintainer_map" direct="true" varName="M1"/>
    <interface iRef="ISplitterCollectorImpl" nArgs="2">
      <slice isRef="task_binding_split">
        <originRef cRef="task_binding_split" iRef="ITaskPort"/>
        <visualDescription h="10" w="10" x="92" y="29"/>
      </slice>
      <slice isRef="collect_pairs">
        <originRef cRef="collect_pairs" iRef="IBindingDirect"/>
        <visualDescription h="10" w="10" x="28" y="20"/>
      </slice>
      <slice isRef="split_channel">
        <originRef cRef="split_channel" iRef="IChannel"/>
        <visualDescription h="10" w="10" x="115" y="12"/>
      </slice>
      <slice isRef="xxx">
        <originRef cRef="xxx" iRef="IIterator"/>
        <visualDescription h="10" w="10" x="22" y="7"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvance;&#xA;using br.ufc.mdcc.hpc.storm.binding.channel.Binding;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.custom.PartitionFunction;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.custom.TerminateFunction;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.hpcshelf.platform.Maintainer;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.mapreduce.impl.connector.SplitterImpl &#xA;{&#xA;&#x9;public abstract class BaseISplitterCollectorImpl&lt;M0,IKey,IValue,OKey,OValue,BF,TF>: Synchronizer, BaseISplitterCollector&lt;M0,IKey,IValue,OKey, OValue, BF,TF>&#xA;&#x9;&#x9;where M0:IMaintainer&#xA;&#x9;&#x9;where IKey:IData&#xA;&#x9;&#x9;where IValue:IData&#xA;&#x9;&#x9;where OKey:IData&#xA;&#x9;&#x9;where OValue:IData&#xA;&#x9;&#x9;where BF:IPartitionFunction&lt;IKey>&#xA;&#x9;&#x9;where TF:ITerminateFunction&lt;IKey,IValue,OKey,OValue>&#xA;&#x9;{&#xA;&#x9;&#x9;static protected int FACET_REDUCE = 0;&#xA;&#x9;&#x9;static protected int FACET_MAP = 1;&#xA;&#x9;&#x9;static protected int FACET_SOURCE = 2;&#xA;&#x9;&#x9;static protected int FACET_SINK = 3;&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_port_split_next = null;&#xA;&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_binding_split_next = null;&#xA;&#x9;&#x9;public ITaskPort&lt;ITaskPortTypeAdvance> Task_binding_split_next&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.task_binding_split_next == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.task_binding_split_next = (ITaskPort&lt;ITaskPortTypeAdvance>) Services.getPort(&quot;task_binding_split_next&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.task_binding_split_next;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;private IClientBase&lt;IPortTypeIterator> collect_pairs = null;&#xA;&#xA;&#x9;&#x9;public IClientBase&lt;IPortTypeIterator> Collect_pairs&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.collect_pairs == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.collect_pairs = (IClientBase&lt;IPortTypeIterator>) Services.getPort(&quot;collect_pairs&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.collect_pairs;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IChannel split_channel = null;&#xA;&#xA;&#x9;&#x9;protected IChannel Split_channel&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.split_channel == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.split_channel = (IChannel) Services.getPort(&quot;split_channel&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.split_channel;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private BF bin_function_iterate = default(BF);&#xA;&#x9;&#x9;protected BF Bin_function_iterate&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.bin_function_iterate == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.bin_function_iterate = (BF) Services.getPort(&quot;bin_function_iterate&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.bin_function_iterate;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private OKey input_key = default(OKey);&#xA;&#x9;&#x9;protected OKey Input_key&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_key == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_key = (OKey) Services.getPort(&quot;input_key&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_key;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IInteger output_key = null;&#xA;&#x9;&#x9;protected IInteger Output_key&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_key == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_key = (IInteger) Services.getPort(&quot;output_key&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_key;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private OKey input_key_iterate = default(OKey);&#xA;&#x9;&#x9;protected OKey Input_key_iterate&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_key_iterate == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_key_iterate = (OKey) Services.getPort(&quot;input_key_iterate&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_key_iterate;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IInteger output_key_iterate = null;&#xA;&#x9;&#x9;protected IInteger Output_key_iterate&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_key_iterate == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_key_iterate = (IInteger) Services.getPort(&quot;output_key_iterate&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_key_iterate;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private TF terminate_function = default(TF);&#xA;&#x9;&#x9;protected TF Terminate_function&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.terminate_function == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.terminate_function = (TF) Services.getPort(&quot;terminate_function&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.terminate_function;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;OKey, OValue>> output_pairs = null;&#xA;&#xA;&#x9;&#x9;protected IIterator&lt;IKVPair&lt;OKey, OValue>> Output_pairs&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_pairs == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_pairs = (IIterator&lt;IKVPair&lt;OKey, OValue>>) Services.getPort(&quot;output_pairs&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_pairs;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IKey, IValue>> input_pairs = null;&#xA;&#xA;&#x9;&#x9;protected IIterator&lt;IKVPair&lt;IKey, IValue>> Input_pairs&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_pairs == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_pairs = (IIterator&lt;IKVPair&lt;IKey, IValue>>) Services.getPort(&quot;input_pairs&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_pairs;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;}" name="BaseISplitterCollectorImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.mapreduce.impl.connector.SplitterImpl/bin/1.0.0.0/BaseISplitterCollectorImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase/bin/1.0.0.0/IClientBase.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator/bin/1.0.0.0/IPortTypeIterator.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.binding.task.TaskBindingAdvance/bin/1.0.0.0/ITaskBindingAdvance.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvance/bin/1.0.0.0/ITaskPortTypeAdvance.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.channel.Binding/bin/1.0.0.0/IChannel.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter/bin/1.0.0.0/BaseISplitterCollector.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.custom.PartitionFunction;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using System.Collections.Generic;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using System.Threading;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.custom.TerminateFunction;&#xA;using br.ufc.mdcc.hpcshelf.platform.Maintainer;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvance;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.mapreduce.impl.connector.SplitterImpl&#xA;{&#xA;&#x9;public class ISplitterCollectorImpl&lt;M0,IKey, IValue, OKey, OValue, BF, TF> : BaseISplitterCollectorImpl&lt;M0,IKey, IValue, OKey, OValue, BF, TF>, ISplitterCollector&lt;M0,IKey, IValue, OKey, OValue, BF, TF>&#xA;&#x9;&#x9;where M0:IMaintainer&#xA;&#x9;&#x9;where IKey:IData&#xA;&#x9;&#x9;where IValue:IData&#xA;&#x9;&#x9;where OKey:IData&#xA;&#x9;&#x9;where OValue:IData&#xA;&#x9;&#x9;where BF:IPartitionFunction&lt;IKey>&#xA;&#x9;&#x9;where TF:ITerminateFunction&lt;IKey,IValue,OKey,OValue>&#xA;&#x9;{&#xA;&#x9;&#x9;static private int TAG_SPLIT_NEW_CHUNK = 246;&#xA;&#x9;&#x9;static private int TAG_SPLIT_END_CHUNK = 247;&#xA;&#x9;&#x9;static private int TAG_SPLIT_END_COMPUTATION = 247;&#xA;&#xA;&#x9;&#x9;private void terminate_go()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Terminate_function.go ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER REDUCE COLLECTOR START&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;OKey,OValue>> input_instance = (IIteratorInstance&lt;IKVPair&lt;OKey,OValue>>) Collect_pairs.Client;&#xA;&#x9;&#x9;&#x9;Terminate_function.Iterate_pairs = input_instance;&#xA;&#xA;&#x9;&#x9;&#x9;Thread thread_terminate_function = new Thread (new ThreadStart(terminate_go));&#xA;&#x9;&#x9;&#x9;thread_terminate_function.Start ();&#xA;&#xA;&#x9;&#x9;&#x9;Thread thread_send_to_mappers = new Thread (new ThreadStart (send_to_mappers));&#xA;&#x9;&#x9;&#x9;thread_send_to_mappers.Start ();&#xA;&#xA;&#x9;&#x9;&#x9;thread_terminate_function.Join ();&#xA;&#x9;&#x9;&#x9;thread_send_to_mappers.Join ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER REDUCE COLLECTOR FINISH&quot;);&#xA;&#xA;&#x9;&#x9;//&#x9;Thread thread_send_to_sink = new Thread (new ThreadStart (send_to_sink));&#xA;&#x9;&#x9;//&#x9;thread_send_to_sink.Start ();&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;private static int CHUNK_SIZE = 50;&#xA;&#xA;&#x9;&#x9;private void send_to_mappers ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector 1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;OKey,OValue>> output_instance = (IIteratorInstance&lt;IKVPair&lt;OKey,OValue>>) Output_pairs.Instance;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IKey,IValue>> input_instance = (IIteratorInstance&lt;IKVPair&lt;IKey,IValue>>) Input_pairs.Instance;&#xA;&#xA;&#x9;&#x9;&#x9;object bin_object = null;&#xA;&#xA;&#x9;&#x9;&#x9;// DETERMINE COMMUNICATION TARGETs&#xA;&#x9;&#x9;&#x9;Tuple&lt;int,int> sink_ref = new Tuple&lt;int,int> (this.FacetIndexes [FACET_SINK] [0], 0);&#xA;&#xA;&#x9;&#x9;&#x9;IDictionary&lt;int,Tuple&lt;int,int>> unit_ref = new Dictionary&lt;int, Tuple&lt;int,int>> ();&#xA;&#x9;&#x9;&#x9;int m_size = 0;&#xA;&#x9;&#x9;&#x9;foreach (int i in this.FacetIndexes[FACET_MAP]) &#xA;&#x9;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;&#x9;int nr0 = m_size;&#xA;&#x9;&#x9;&#x9;&#x9;m_size += this.UnitSizeInFacet [i] [&quot;feeder&quot;];&#xA;&#x9;&#x9;&#x9;&#x9;for (int k=0, j=nr0; j &lt; m_size; k++, j++) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit_ref [j] = new Tuple&lt;int,int> (i/*,0 index of feeder*/,k);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector 2&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture sync_perform;&#xA;&#xA;&#x9;&#x9;&#x9;bool end_computation = false;&#xA;&#x9;&#x9;&#x9;while (!end_computation) // new iteration&#xA;&#x9;&#x9;&#x9;{    &#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector LOOP&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;end_computation = true;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE 1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//Task_binding_split_next.invoke (ITaskPortAdvance.READ_CHUNK);  //****&#xA;&#x9;&#x9;&#x9;&#x9;//Task_binding_split_next.invoke (ITaskPortAdvance.PERFORM, out sync_perform);&#xA;&#x9;&#x9;&#x9;&#x9;//Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE 2&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// SEND TO SINK&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;IKVPairInstance&lt;OKey,OValue>> buffer_sink = new List&lt;IKVPairInstance&lt;OKey,OValue>>();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end_computation = !input_instance.has_next();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Thread thread_send_output = new Thread(new ThreadStart(delegate {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int count1 = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (output_instance.fetch_next (out bin_object)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;OKey,OValue> item = (IKVPairInstance&lt;OKey,OValue>)bin_object;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;buffer_sink.Add (item);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (count1 % CHUNK_SIZE == 0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// PERFORM&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector SINK SEND CHUNK 3-1 count=&quot; + count1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Split_channel.Send (buffer_sink, sink_ref, TAG_SPLIT_NEW_CHUNK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector SINK SEND CHUNK 3-2 count=&quot; + count1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;buffer_sink.Clear ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;count1++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (buffer_sink.Count >0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector SINK SEND CHUNK 3-3 count=&quot; + count1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Split_channel.Send (buffer_sink, sink_ref, TAG_SPLIT_NEW_CHUNK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector SINK SEND CHUNK 3-4 count=&quot; + count1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;thread_send_output.Start();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// SEND BACK TO MAPPER (new iteration)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Bin_function_iterate.NumberOfPartitions = m_size;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;IKVPairInstance&lt;OKey,OValue>>[] buffer = new IList&lt;IKVPairInstance&lt;OKey,OValue>>[m_size];&#xA;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; m_size; i++)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;buffer [i] = new List&lt;IKVPairInstance&lt;OKey,OValue>> ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE 3 end_computation=&quot; + end_computation);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int count = 0;&#xA;&#x9;&#x9;&#x9;&#x9;while (input_instance.fetch_next (out bin_object)) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE LOOP 4-1 count=&quot; + count);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;OKey,OValue> item = (IKVPairInstance&lt;OKey,OValue>)bin_object;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.Input_key_iterate.Instance = item.Key;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Bin_function_iterate.go ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int index = ((IIntegerInstance)this.Output_key_iterate.Instance).Value;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;buffer [index].Add (item);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (count % CHUNK_SIZE == 0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.READ_CHUNK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.PERFORM, out sync_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; m_size; i++) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;SPLITTER REDUCE COLLECTOR - Sending chunk of &quot; + buffer[i].Count + &quot; elements&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Split_channel.Send (buffer [i], unit_ref [i], TAG_SPLIT_NEW_CHUNK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;buffer [i].Clear();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sync_perform.wait ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.CHUNK_READY);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE 3-5&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE LOOP 4-2 count=&quot; + count);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;count++;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE 5&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.READ_CHUNK);&#xA;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.PERFORM, out sync_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// SEND REMAINING PAIRS AND CLOSES THE CHUNK LIST&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE 6-1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; m_size; i++) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Split_channel.Send (buffer [i], unit_ref [i], TAG_SPLIT_END_CHUNK);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sync_perform.wait ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE 7-1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.CHUNK_READY);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE 7-2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;thread_send_output.Join();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//sync_perform.wait ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector ITERATE 7-3&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: ISplitterCollector END COMPUTATION &quot;);&#xA;&#xA;&#x9;&#x9;&#x9;input_instance.finish ();&#xA;&#x9;&#x9;&#x9;output_instance.finish ();&#xA;&#x9;&#x9;&#x9;Split_channel.Send (new List&lt;IKVPairInstance&lt;OKey,OValue>>(), sink_ref, TAG_SPLIT_END_CHUNK);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="ISplitterCollectorImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.mapreduce.impl.connector.SplitterImpl/bin/1.0.0.0/ISplitterCollectorImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.mapreduce.impl.connector.SplitterImpl/bin/1.0.0.0/BaseISplitterCollectorImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter/bin/1.0.0.0/ISplitterCollector.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="137" x="104" y="322">
        <color b="0" g="0" r="255"/>
      </visualDescription>
      <port name="task_binding_split">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_binding_split" sRef="task_binding_split"/>
      </port>
      <port name="collect_pairs">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="collect_pairs" sRef="collect_pairs"/>
      </port>
      <parameter iname="IData" order="0" parid="input_key_type" uname="data" varid="IKey"/>
      <parameter iname="IData" order="1" parid="input_value_type" uname="data" varid="IValue"/>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <interface iRef="ISplitterFeederImpl" nArgs="2">
      <slice isRef="task_binding_split">
        <originRef cRef="task_binding_split" iRef="ITaskPort"/>
        <visualDescription h="10" w="10" x="11" y="25"/>
      </slice>
      <slice isRef="feed_pairs">
        <originRef cRef="feed_pairs" iRef="IBindingDirect"/>
        <visualDescription h="10" w="10" x="71" y="28"/>
      </slice>
      <slice isRef="split_channel">
        <originRef cRef="split_channel" iRef="IChannel"/>
        <visualDescription h="10" w="10" x="9" y="13"/>
      </slice>
      <slice isRef="output">
        <originRef cRef="output" iRef="IIterator"/>
        <visualDescription h="10" w="10" x="43" y="16"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvance;&#xA;using br.ufc.mdcc.hpc.storm.binding.channel.Binding;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeData;&#xA;using br.ufc.mdcc.hpcshelf.platform.Maintainer;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.mapreduce.impl.connector.SplitterImpl &#xA;{&#xA;&#x9;public abstract class BaseISplitterFeederImpl&lt;M1,IKey, IValue>: Synchronizer, BaseISplitterFeeder&lt;M1,IKey, IValue>&#xA;&#x9;&#x9;where M1:IMaintainer&#xA;&#x9;&#x9;where IKey:IData&#xA;&#x9;&#x9;where IValue:IData&#xA;&#x9;{&#xA;&#x9;&#x9;static protected int FACET_REDUCE = 0;&#xA;&#x9;&#x9;static protected int FACET_MAP = 1;&#xA;&#x9;&#x9;static protected int FACET_SOURCE = 2;&#xA;&#x9;&#x9;static protected int FACET_SINK = 3;&#xA;&#xA;&#xA;&#x9;&#x9;private IServerBase&lt;IPortTypeIterator> feed_pairs = null;&#xA;&#xA;&#x9;&#x9;public IServerBase&lt;IPortTypeIterator> Feed_pairs&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.feed_pairs == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.feed_pairs = (IServerBase&lt;IPortTypeIterator>) Services.getPort(&quot;feed_pairs&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.feed_pairs;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IChannel split_channel = null;&#xA;&#xA;&#x9;&#x9;protected IChannel Split_channel&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.split_channel == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.split_channel = (IChannel) Services.getPort(&quot;split_channel&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.split_channel;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IKey,IValue>> output = null;&#xA;&#x9;&#x9;protected IIterator&lt;IKVPair&lt;IKey,IValue>> Output {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output = (IIterator&lt;IKVPair&lt;IKey,IValue>>)Services.getPort(&quot;output&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_binding_split_first = null;&#xA;&#x9;&#x9;public ITaskPort&lt;ITaskPortTypeAdvance> Task_binding_split_first&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.task_binding_split_first == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.task_binding_split_first = (ITaskPort&lt;ITaskPortTypeAdvance>) Services.getPort(&quot;task_binding_split_first&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.task_binding_split_first;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_binding_split_next = null;&#xA;&#x9;&#x9;public ITaskPort&lt;ITaskPortTypeAdvance> Task_binding_split_next&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.task_binding_split_next == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.task_binding_split_next = (ITaskPort&lt;ITaskPortTypeAdvance>) Services.getPort(&quot;task_binding_split_next&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.task_binding_split_next;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeData> task_binding_data = null;&#xA;&#x9;&#x9;public ITaskPort&lt;ITaskPortTypeData> Task_binding_data&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.task_binding_data == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.task_binding_data = (ITaskPort&lt;ITaskPortTypeData>) Services.getPort(&quot;task_binding_data&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.task_binding_data;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseISplitterFeederImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.mapreduce.impl.connector.SplitterImpl/bin/1.0.0.0/BaseISplitterFeederImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.binding.task.TaskBindingAdvance/bin/1.0.0.0/ITaskBindingAdvance.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase/bin/1.0.0.0/IServerBase.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator/bin/1.0.0.0/IPortTypeIterator.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvance/bin/1.0.0.0/ITaskPortTypeAdvance.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.channel.Binding/bin/1.0.0.0/IChannel.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter/bin/1.0.0.0/BaseISplitterFeeder.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using System.Collections.Generic;&#xA;using br.ufc.mdcc.hpc.storm.binding.channel.Binding;&#xA;using br.ufc.mdcc.common.Data;&#xA;using System.Diagnostics;&#xA;using System.Threading;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpcshelf.platform.Maintainer;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeData;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvance;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.mapreduce.impl.connector.SplitterImpl&#xA;{&#xA;&#x9;public class ISplitterFeederImpl&lt;M1,IKey, IValue>: BaseISplitterFeederImpl&lt;M1,IKey, IValue>, ISplitterFeeder&lt;M1,IKey, IValue>&#xA;&#x9;&#x9;where M1:IMaintainer&#xA;&#x9;&#x9;where IKey:IData&#xA;&#x9;&#x9;where IValue:IData&#xA;&#x9;{&#xA;&#x9;&#x9;static private int TAG_SPLIT_NEW_CHUNK = 246;&#xA;&#x9;&#x9;static private int TAG_SPLIT_END_CHUNK = 247;&#xA;&#xA;&#x9;&#x9;private IIteratorInstance&lt;IKVPair&lt;IKey,IValue>> output_instance = null;&#xA;&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.GlobalRank + &quot;: STARTING SPLITTER ...1&quot;);&#xA;&#x9;&#x9;&#x9;output_instance = (IIteratorInstance&lt;IKVPair&lt;IKey,IValue>>)Output.Instance;&#xA;&#x9;&#x9;&#x9;Feed_pairs.Server = output_instance;&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.GlobalRank + &quot;: STARTING SPLITTER ...2&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;// RECEIVE PAIR FROM THE SOURCE (1st iteration)&#xA;&#x9;&#x9;&#x9;Tuple&lt;int,int> unit_ref_source = new Tuple&lt;int,int> (this.FacetIndexes[FACET_SOURCE][0],0);&#xA;&#xA;&#x9;&#x9;&#x9;IDictionary&lt;int,Tuple&lt;int,int>> unit_ref = new Dictionary&lt;int, Tuple&lt;int,int>> ();&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.GlobalRank + &quot;: STARTING SPLITTER ...3&quot;);&#xA;&#x9;&#x9;&#x9;// RECEIVE PAIRS FROM THE REDUCERS (next iterations)&#xA;&#x9;&#x9;&#x9;int senders_size = 0;&#xA;&#x9;&#x9;&#x9;foreach (int i in this.FacetIndexes[FACET_REDUCE]) &#xA;&#x9;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.GlobalRank + &quot;: STARTING SPLITTER ...4 -- i=&quot; + i);&#xA;&#x9;&#x9;&#x9;&#x9;int nr0 = senders_size;&#xA;&#x9;&#x9;&#x9;&#x9;senders_size += this.UnitSizeInFacet [i] [&quot;collector&quot;];&#xA;&#x9;&#x9;&#x9;&#x9;for (int k=0, j=nr0; j &lt; senders_size; k++, j++) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit_ref[j] = new Tuple&lt;int,int> (i,k);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;//&#x9;Thread[] threads_receive = new Thread[senders_size];&#xA;&#xA;&#x9;&#x9;//&#x9;for (int i = 0; i &lt; senders_size; i++) &#xA;&#x9;&#x9;//&#x9;{&#xA;&#x9;&#x9;//&#x9;&#x9;threads_receive [i] = new Thread ((ParameterizedThreadStart)delegate(object unit_ref_obj) { &#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;Tuple&lt;int,int> unit_ref_i = (Tuple&lt;int,int>)unit_ref_obj;&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;receive_pairs_iteration (unit_ref_i);&#xA;&#x9;&#x9;//&#x9;&#x9;});&#xA;&#x9;&#x9;//&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;// TODO: READ_SOURCE &#xfffd; necess&#xfffd;rio ? N&#xfffd;o no map feeder. Tirar fatia de Task_binding data ...&#xA;&#xA;&#x9;&#x9;&#x9;Task_binding_data.TraceFlag = true;&#xA;&#x9;&#x9;&#x9;Task_binding_data.invoke (ITaskPortData.READ_SOURCE);&#xA;&#x9;&#x9;&#x9;// Do nothing ... &#xA;&#xA;&#xA;&#x9;&#x9;&#x9;IList&lt;IKVPairInstance&lt;IKey,IValue>> buffer;&#xA;&#x9;&#x9;&#x9;object buffer_obj;&#xA;&#xA;&#x9;&#x9;&#x9;CompletedStatus status;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;do &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;IActionFuture sync_perform;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER - BEFORE READ_CHUNK&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.READ_CHUNK);  //****&#xA;&#x9;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.PERFORM, out sync_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER !!! PERFORM OK !&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Split_channel.Receive (unit_ref_source, MPI.Communicator.anyTag, out buffer, out status);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: CHUNK PAIRS RECEIVED !!! from source buffer.Count=&quot; + buffer.Count);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;foreach (IKVPairInstance&lt;IKey,IValue> kv in buffer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;output_instance.put (kv);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;output_instance.finish ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sync_perform.wait ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// CHUNK_READY&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER 1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.CHUNK_READY);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER 2&quot;);&#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;while (status.Tag != TAG_SPLIT_END_CHUNK);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: FINISH READING CHUNKS OF SOURCE&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;bool end_computation = false;&#xA;&#x9;&#x9;&#x9;while (!end_computation)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;end_computation = true;&#xA;&#x9;&#x9;&#x9;&#x9;int count_finished_streams = 0;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;while (count_finished_streams &lt; senders_size) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture sync_perform;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER NEXT 1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.READ_CHUNK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.PERFORM, out sync_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER NEXT 2&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; senders_size; i++) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER NEXT LOOP - before receive&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Split_channel.Receive (unit_ref[i], MPI.Communicator.anyTag, out buffer_obj, out status);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: CHUNK PAIRS RECEIVED !!! from collector of index &quot; + i + &quot; / count_finished_streams=&quot; + count_finished_streams);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (status.Tag == TAG_SPLIT_END_CHUNK)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;count_finished_streams++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end_computation = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;buffer = (IList&lt;IKVPairInstance&lt;IKey,IValue>>) buffer_obj;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;foreach (IKVPairInstance&lt;IKey,IValue> kv in buffer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;output_instance.put (kv);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;catch (InvalidCastException e) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;SPLITTER MAPPER: incompatible input !&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;count_finished_streams++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;output_instance.finish ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER NEXT 3&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sync_perform.wait ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER NEXT 4&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// CHUNK_READY&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.CHUNK_READY);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER NEXT 5&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER FINISH 1 !&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Task_binding_data.invoke (ITaskPortData.TERMINATE);&#xA;&#x9;&#x9;&#x9;Task_binding_data.invoke (ITaskPortData.WRITE_SINK);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.Rank + &quot;: SPLITTER MAP FEEDER FINISH 2 !&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;//private Object thisLock = new Object();&#xA;&#xA;&#x9;&#x9;//private void receive_pairs_iteration(Tuple&lt;int,int> unit_ref)&#xA;&#x9;&#x9;//{&#xA;&#x9;&#x9;//&#x9;IList&lt;IKVPairInstance&lt;IKey,IValue>> buffer;&#xA;&#x9;&#x9;//&#x9;CompletedStatus status;&#xA;&#x9;&#x9;//&#xA;&#x9;&#x9;//&#x9;while (true) &#xA;&#x9;&#x9;//&#x9;{&#xA;&#x9;&#x9;//&#x9;&#x9;lock (thisLock) &#xA;&#x9;&#x9;//&#x9;&#x9;{&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;Task_port_split_first.invoke (ITaskPortAdvance.PERFORM);&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;Split_channel.Receive (unit_ref, MPI.Communicator.anyTag, out buffer, out status);&#xA;&#x9;&#x9;//&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;Console.WriteLine (&quot;CHUNK PAIRS RECEIVED !!! &quot;);&#xA;&#x9;&#x9;//&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;foreach (IKVPairInstance&lt;IKey,IValue> kv in buffer)&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;&#x9;output_instance.put (kv);&#xA;&#x9;&#x9;//&#x9;&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;if (status.Tag == TAG_SPLIT_PAIR_FINISH)&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;&#x9;count_finished_streams++;&#xA;&#x9;&#x9;//&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;output_instance.finish ();&#xA;&#x9;&#x9;//&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;// CHUNK_READY&#xA;&#x9;&#x9;//&#x9;&#x9;&#x9;Task_port_split_first.invoke (ITaskPortAdvance.CHUNK_READY);&#xA;&#x9;&#x9;//&#x9;&#x9;}&#xA;&#x9;&#x9;//&#x9;}&#xA;&#x9;&#x9;//}&#xA;&#x9;}&#xA;}&#xA;" name="ISplitterFeederImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.mapreduce.impl.connector.SplitterImpl/bin/1.0.0.0/ISplitterFeederImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.mapreduce.impl.connector.SplitterImpl/bin/1.0.0.0/BaseISplitterFeederImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter/bin/1.0.0.0/ISplitterFeeder.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
      </sources>
      <visualDescription h="40" w="182" x="644" y="334">
        <color b="0" g="0" r="255"/>
      </visualDescription>
      <port name="task_binding_split">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_binding_split" sRef="task_binding_split"/>
      </port>
      <port name="feed_pairs">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="feed_pairs" sRef="feed_pairs"/>
      </port>
      <parameter iname="IData" order="0" parid="input_key_type" uname="data" varid="IKey"/>
      <parameter iname="IData" order="1" parid="input_value_type" uname="data" varid="IValue"/>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="ISplitterCollectorImpl" multiple="true" private="false" replica="0" uRef="collector" visibleInterface="true">
      <super cRef="base" uRef="collector"/>
      <visualDescription h="40" w="137" x="150" y="412"/>
    </unit>
    <unit facet="1" iRef="ISplitterFeederImpl" multiple="true" private="false" replica="0" uRef="feeder" visibleInterface="true">
      <super cRef="base" uRef="feeder"/>
      <visualDescription h="40" w="182" x="613" y="412"/>
    </unit>
  </componentInfo>
</component:component>