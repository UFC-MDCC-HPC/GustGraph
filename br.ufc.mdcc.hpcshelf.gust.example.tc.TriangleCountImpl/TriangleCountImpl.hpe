<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="002400000480000094000000060200000024000052534131000400001100000017c119f717acd5005720a551879ec19cd84b1e86dc8ec1e95095cfb1dcf344db102c9b585ac3de526539b3cd5bf8218720bc04bd4ae794283b53da64957a09eb69931c9fb36bd305fe0d459667e6d3885a2ead3cade7c4f8e3064f405c762750e99a21b5a8a27a5c9f765e07ef6e16d0b0ba2c288f149503ea66d78402f412a3" isAbstract="false" kind="Computation" name="TriangleCountImpl" packagePath="br.ufc.mdcc.hpcshelf.gust.example.tc">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c73e3276152b6e2313cf2a3b8cb80d67f86c312bc4953ea0830e347ce139a399b7bd7f8f6892eed19f0e0774cdabd45d3d46a5754fa85387f07d545b13e8fa89d0c1fa980559414188b870986a0d4d9020eac6b40f17ebaedc6f7edfa719ff47f70b04c3c8fe26763e0267151a75607a8a559f91d78eaedc6b113ca561bd52ae" localRef="base" location="br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCount/TriangleCount.hpe" name="TriangleCount" package="br.ufc.mdcc.hpcshelf.gust.example.tc" version="1.0.0.0">
        <visualDescription h="60" w="100" x="284" y="375">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <port index_replica="0" localRef="continuation_value" location="br.ufc.mdcc.hpcshelf.gust.example.tc.DataTriangle/DataTriangle.hpe" multiple="false" name="DataTriangle" package="br.ufc.mdcc.hpcshelf.gust.example.tc" exposed="true">
          <visualDescription h="68" w="203" x="23" y="352">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="input_values" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="181" x="96" y="471">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="X###568786980"/>
          <parameter formFieldId="key_type" varName="TKey"/>
          <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="137" y="20"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="output_value" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="63" w="154" x="171" y="551">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="OValue"/>
          <parameter formFieldId="key_type" varName="OKey"/>
          <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="7" y="21"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="graph" location="br.ufc.mdcc.hpcshelf.gust.graph.UndirectedGraph/UndirectedGraph.hpe" multiple="false" name="UndirectedGraph" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="true">
          <visualDescription h="60" w="146" x="363" y="487">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="edge_type" varName="X###1153060063"/>
          <parameter formFieldId="container" varName="X###608253097"/>
          <parameter formFieldId="vertex_type" varName="X###390619965"/>
          <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="output_messages" location="br.ufc.mdcc.common.Iterator/Iterator.hpe" multiple="false" name="Iterator" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="265" x="461" y="401">
            <color b="203" g="192" r="255"/>
          </visualDescription>
          <parameter formFieldId="item_type" varName="X###292242876"/>
          <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="iterator">
            <visualDescription h="20" w="20" x="19" y="23"/>
          </unitBounds>
        </port>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="reduce_function">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <interface iRef="ITriangleCountImpl" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.VertexBasic;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc.DataTriangle;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.InputFormat;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCount;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCountImpl&#xA;{&#xA;&#x9;public abstract class BaseITriangleCountImpl: Computation, BaseITriangleCount&#xA;&#x9;{&#xA;&#x9;&#x9;private IUndirectedGraph&lt;IDataContainerV&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>>, IVertexBasic, IEdgeBasic&lt;IVertexBasic>> graph = null;&#xA;&#x9;&#x9;public IUndirectedGraph&lt;IDataContainerV&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>>, IVertexBasic, IEdgeBasic&lt;IVertexBasic>> Graph&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.graph == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.graph = (IUndirectedGraph&lt;IDataContainerV&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>>, IVertexBasic, IEdgeBasic&lt;IVertexBasic>>) Services.getPort(&quot;graph&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.graph;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IKVPair&lt;IVertexBasic, IIterator&lt;IDataTriangle>> input_values = null;&#xA;&#x9;&#x9;public IKVPair&lt;IVertexBasic, IIterator&lt;IDataTriangle>> Input_values&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_values == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_values = (IKVPair&lt;IVertexBasic, IIterator&lt;IDataTriangle>>) Services.getPort(&quot;input_values&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IVertexBasic, IDataTriangle>> output_messages = null;&#xA;&#x9;&#x9;public IIterator&lt;IKVPair&lt;IVertexBasic, IDataTriangle>> Output_messages&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_messages == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_messages = (IIterator&lt;IKVPair&lt;IVertexBasic, IDataTriangle>>) Services.getPort(&quot;output_messages&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_messages;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IDataTriangle continuation_value = null;&#xA;&#x9;&#x9;public IDataTriangle Continuation_value&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.continuation_value == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.continuation_value = (IDataTriangle) Services.getPort(&quot;continuation_value&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.continuation_value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IKVPair&lt;IVertexBasic, IDataTriangle> output_value = null;&#xA;&#x9;&#x9;public IKVPair&lt;IVertexBasic, IDataTriangle> Output_value&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_value == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_value = (IKVPair&lt;IVertexBasic, IDataTriangle>) Services.getPort(&quot;output_value&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IInputFormat input_format = null;&#xA;&#x9;&#x9;protected IInputFormat Input_format&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_format == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_format = (IInputFormat) Services.getPort(&quot;input_format&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_format;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseITriangleCountImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCountImpl/bin/1.0.0.0/BaseITriangleCountImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.KVPair/bin/1.0.0.0/IKVPair.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.VertexBasic/bin/1.0.0.0/IVertexBasic.dll</dependency>
          <dependency>br.ufc.mdcc.common.Iterator/bin/1.0.0.0/IIterator.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.tc.DataTriangle/bin/1.0.0.0/IDataTriangle.dll</dependency>
          <dependency>br.ufc.mdcc.common.Data/bin/1.0.0.0/IData.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.InputFormat/bin/1.0.0.0/IInputFormat.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCount/bin/1.0.0.0/BaseITriangleCount.dll</dependency>
        </file>
        <file contents="using System;&#xA;using System.Collections.Generic;&#xA;using System.Collections.Concurrent;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCount;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Graph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.UndirectedGraph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.VertexBasic;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeBasic;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc.DataTriangle;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.InputFormat;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCountImpl {&#xA;&#x9;public class ITriangleCountImpl : BaseITriangleCountImpl, ITriangleCount {&#xA;&#xA;&#x9;&#x9;private IUndirectedGraphInstance&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>, int, IEdgeInstance&lt;IVertexBasic, int>> g = null;&#xA;&#x9;&#x9;private int[] partition = null;&#xA;&#x9;&#x9;private bool[]  partition_own = null;&#xA;&#x9;&#x9;private int partid = 0;&#xA;&#x9;&#x9;private int partition_size = 0;&#xA;&#x9;&#x9;private int count = 0;&#xA;&#x9;&#x9;private IDictionary&lt;int, IList&lt;KeyValuePair&lt;int,int>>> triangles = new Dictionary&lt;int, IList&lt;KeyValuePair&lt;int,int>>>();&#xA;&#xA;&#x9;&#x9;public override void main() {}&#xA;&#x9;&#x9;public override void after_initialize() { }&#xA;&#xA;&#x9;&#x9;public bool isGhost(int v){ return !partition_own[this.partition [v - 1]]; }&#xA;&#xA;&#x9;&#x9;#region Create Undirected Graph&#xA;&#x9;&#x9;public void graph_creator(){&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IIterator&lt;IInputFormat>> input_gifs_instance = (IKVPairInstance&lt;IInteger,IIterator&lt;IInputFormat>>)Graph_values.Instance;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IInputFormat> vgifs = (IIteratorInstance&lt;IInputFormat>)input_gifs_instance.Value;&#xA;&#xA;&#x9;&#x9;&#x9;object o;&#xA;&#x9;&#x9;&#x9;if (partition_own==null){&#xA;&#x9;&#x9;&#x9;&#x9;if (vgifs.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IInputFormatInstance gif = (IInputFormatInstance)o;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition = gif.PartitionTABLE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partid = gif.PARTID;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_size = gif.PARTITION_SIZE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g = Graph.newInstance (gif.VSIZE); // pega-se uma instancia do graph, com vertices do tipo inteiro, com tamanho previsto VSIZE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.DataContainer.AllowingLoops = false; // n&#xe3;o ser&#xe3;o premitidos la&#xe7;os&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.DataContainer.AllowingMultipleEdges = false; // n&#xe3;o ser&#xe3;o permitidas m&#xfa;ltiplas arestas&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;graph_creator_aux (gif); // inserem-se dados no grafo&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_own = new bool[partition_size];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_own [partid] = true;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;while (vgifs.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;graph_creator_aux ((IInputFormatInstance)o);&#xA;&#x9;&#x9;&#x9;&#x9;partition_own [((IInputFormatInstance)o).PARTID] = true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private void graph_creator_aux(IInputFormatInstance gif){&#xA;&#x9;&#x9;&#x9;for (int i = 0; i &lt; gif.ESIZE;) {&#xA;&#x9;&#x9;&#x9;&#x9;if (gif.Target [i] != 0) { // Ser&#xe1; usada a forma canonica: i->j, onde i&lt;j, i>0 j>0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int s = gif.Source [i] &lt; gif.Target [i] ? gif.Source [i] : gif.Target [i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int t = gif.Target [i] > gif.Source [i] ? gif.Target [i] : gif.Source [i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.addVertex (s);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.addVertex (t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.noSafeAdd (s, t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;i++;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IInputFormat>> output_gifs_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IInputFormat>>)Output_gif.Instance;&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IInputFormat> item = (IKVPairInstance&lt;IInteger,IInputFormat>)Output_gif.createItem ();&#xA;&#x9;&#x9;&#x9;((IIntegerInstance)item.Key).Value = gif.PARTID;&#xA;&#x9;&#x9;&#x9;item.Value = gif;&#xA;&#x9;&#x9;&#x9;output_gifs_instance.put (item); // Emite-se gif novamente para que a func&#xe3;o de particionamento do conector receba a instancia PartitionTABLE.&#xA;&#x9;&#x9;}                                    // Isso &#xe9; necess&#xe1;rio no caso de IKey ser do tipo IVertex.&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;#region Algorithm implementation&#xA;&#x9;&#x9;public void startup_push(){&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IVertex,IDataTriangle>> output_value_instance = (IIteratorInstance&lt;IKVPair&lt;IVertex,IDataTriangle>>)Output.Instance;&#xA;&#x9;&#x9;&#x9;IEnumerator&lt;int> V = g.vertexSet ().GetEnumerator ();&#xA;&#x9;&#x9;&#x9;while (V.MoveNext ()) {&#xA;&#x9;&#x9;&#x9;&#x9;int v = V.Current;&#xA;&#x9;&#x9;&#x9;&#x9;if (!isGhost(v)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ICollection&lt;int> vneighbors = g.neighborsOf (v);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foreach (int w in vneighbors) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (v &lt; w) { //buscam-se os v&#xe9;rices maiores&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isGhost(w)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IVertex,IDataTriangle> item = (IKVPairInstance&lt;IVertex,IDataTriangle>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IVertexInstance ok = (IVertexInstance)item.Key;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IDataTriangleInstance ov = (IDataTriangleInstance)item.Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ok.Id = w;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ov.V = v;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;output_value_instance.put (item);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IList&lt;KeyValuePair&lt;int,int>> l;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!triangles.TryGetValue(v, out l)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;l = new List&lt;KeyValuePair&lt;int,int>> ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;triangles[v] = l;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;int> wneighbors = g.iteratorNeighborsOf (w);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (wneighbors.MoveNext ()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int z = wneighbors.Current;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (w &lt; z &amp;&amp; vneighbors.Contains (z)) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;l.Add (new KeyValuePair&lt;int,int> (w, z));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;count++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void pull(){&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IVertex,IIterator&lt;IDataTriangle>> input_values_instance = (IKVPairInstance&lt;IVertex,IIterator&lt;IDataTriangle>>)Input_values.Instance;&#xA;&#x9;&#x9;&#x9;IVertexInstance ikey = (IVertexInstance)input_values_instance.Key;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IDataTriangle> ivalues = (IIteratorInstance&lt;IDataTriangle>)input_values_instance.Value;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IVertex,IDataTriangle>> output_value = (IIteratorInstance&lt;IKVPair&lt;IVertex,IDataTriangle>>)Output.Instance;&#xA;&#xA;&#x9;&#x9;&#x9;object o; int w = ikey.Id;&#xA;&#x9;&#x9;&#x9;while (ivalues.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;int v = ((IDataTriangleInstance) o).V; int z = ((IDataTriangleInstance)o).W;&#xA;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;int> wneighbors = g.iteratorNeighborsOf (w);&#xA;&#x9;&#x9;&#x9;&#x9;while (wneighbors.MoveNext ()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int zw = wneighbors.Current;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (w &lt; zw) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (z == 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IVertex,IDataTriangle> item = (IKVPairInstance&lt;IVertex,IDataTriangle>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IVertexInstance ok = (IVertexInstance)item.Key;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IDataTriangleInstance ov = (IDataTriangleInstance)item.Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ok.Id = v;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ov.V = w;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ov.W = zw;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;output_value.put (item);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IList&lt;KeyValuePair&lt;int,int>> l;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!triangles.TryGetValue (w, out l)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;l = new List&lt;KeyValuePair&lt;int,int>> ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;triangles [w] = l;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (z == zw) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;l.Add (new KeyValuePair&lt;int,int>(v,zw));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;count++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void gust0(){&#xA;&#x9;&#x9;&#x9;if ((++iteration) == 3) {&#xA;&#x9;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IVertex,IDataTriangle>> output_value_instance = (IIteratorInstance&lt;IKVPair&lt;IVertex,IDataTriangle>>)Output.Instance;&#xA;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IVertex,IDataTriangle> item;&#xA;&#xA;// ****************************** output Count=Id ,V=0, W=0 *********************************&#xA;&#x9;&#x9;&#x9;&#x9;item = (IKVPairInstance&lt;IVertex,IDataTriangle>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;((IVertexInstance)item.Key).Id = count;&#xA;&#x9;&#x9;&#x9;&#x9;output_value_instance.put (item);&#xA;&#xA;// ****************************** output triangles Id,V,W ***********************************&#xA;//&#x9;&#x9;&#x9;&#x9;foreach (KeyValuePair&lt;int,IList&lt;KeyValuePair&lt;int, int>>> kv in triangles) {&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;foreach (KeyValuePair&lt;int,int> list in kv.Value) {&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;item = (IKVPairInstance&lt;IVertex,IDataTriangle>)Output.createItem ();&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((IVertexInstance)item.Key).Id = kv.Key;     //Id menor que V&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((IDataTriangleInstance)item.Value).V = list.Key; //V menor que W&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((IDataTriangleInstance)item.Value).W = list.Value;&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;output_value_instance.put (item);&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;//&#x9;&#x9;&#x9;&#x9;}&#xA;// ******************************************************************************************&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private int iteration = 1;&#xA;&#x9;&#x9;#endregion&#xA;&#x9;}&#xA;}&#xA;&#xA;" name="ITriangleCountImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCountImpl/bin/1.0.0.0/ITriangleCountImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCountImpl/bin/1.0.0.0/BaseITriangleCountImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCount/bin/1.0.0.0/ITriangleCount.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="190" x="137" y="203">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="ITriangleCountImpl" multiple="false" private="false" replica="0" uRef="reduce_function" visibleInterface="true">
      <super cRef="base" uRef="reduce_function"/>
      <visualDescription h="40" w="190" x="174" y="280"/>
    </unit>
  </componentInfo>
</component:component>