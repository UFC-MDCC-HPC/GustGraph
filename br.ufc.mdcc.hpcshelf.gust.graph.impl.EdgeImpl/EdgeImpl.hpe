<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000005bf4a456f0f161bd1772e9899c3233121a865ebfe83cf8d13ae7f216de00322fe40fa86f348fe4cdad9193a24004870e8126026e7d9e94097cd562d6ee0c6f21f51bfd514139ee008f55d8041b5f820479009c630eca6f360192f9fe95c2c2c8d111b8316f527c85000ce121aa2fc3da02cbf0dc44af104fad29fb66339c6098" isAbstract="false" kind="Data" name="EdgeImpl" packagePath="br.ufc.mdcc.hpcshelf.gust.graph.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000d54313d502cd71eaddd59bbce6fc98434354105ed2b94974f3bc9b4286409eaafc613f05ddb4040680bc5fe60452ff2e5a56fdb48deae544d2c20ac2898293ab5b4dfb183cb21d3a19a9a65795836e2411be505d27c273bc68c8e3ce8d71ce7b09ef1a4dda1ea58b5a044fc71a8fd2be8d678ed083c95860ff81053a70f18691" localRef="base" location="br.ufc.mdcc.hpcshelf.gust.graph.Edge/Edge.hpe" name="Edge" package="br.ufc.mdcc.hpcshelf.gust.graph" version="1.0.0.0">
        <visualDescription h="60" w="100" x="306" y="459">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="vertex_type" varName="V"/>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="data">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <innerComponent localRef="v" location="br.ufc.mdcc.hpcshelf.gust.graph.Vertex/Vertex.hpe" multiple="false" name="Vertex" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="false">
      <visualDescription h="60" w="100" x="468" y="417">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="v" direct="true" varName="V"/>
    <interface iRef="IEdgeImpl" nArgs="1">
      <slice isRef="vertices">
        <originRef cRef="vertices" iRef="IKVPair"/>
        <visualDescription h="10" w="10" x="10" y="24"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.graph.impl.EdgeImpl {&#xA;&#x9;public abstract class BaseIEdgeImpl&lt;V>: DataStructure, BaseIEdge&lt;V>&#xA;&#x9;&#x9;where V:IVertex {&#xA;&#xA;&#x9;&#x9;private IKVPair&lt;V,V> vertices = null;&#xA;&#xA;&#x9;&#x9;protected IKVPair&lt;V,V> Vertices {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.vertices == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.vertices = (IKVPair&lt;V,V>)Services.getPort (&quot;vertices&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.vertices;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="BaseIEdgeImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.gust.graph.impl.EdgeImpl/bin/1.0.0.0/BaseIEdgeImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.KVPair/bin/1.0.0.0/IKVPair.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Vertex/bin/1.0.0.0/IVertex.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Edge/bin/1.0.0.0/BaseIEdge.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.graph.impl.EdgeImpl {&#xA;&#x9;public class IEdgeImpl&lt;V>: BaseIEdgeImpl&lt;V>, IEdge&lt;V> where V:IVertex {&#xA;&#xA;&#x9;&#x9;public IEdgeImpl () { }&#xA;&#xA;&#x9;&#x9;override public void after_initialize () {&#xA;&#x9;&#x9;&#x9;newInstance (); &#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public object newInstance () {&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;V,V> kv = (IKVPairInstance&lt;V,V>)Vertices.newInstance ();&#xA;&#x9;&#x9;&#x9;this.instance = new IEdgeInstanceImpl&lt;V, int> (((IVertexInstance)kv.Key).Id, ((IVertexInstance)kv.Value).Id);&#xA;&#x9;&#x9;&#x9;return this.instance;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private object instance;&#xA;&#x9;&#x9;public object Instance {&#xA;&#x9;&#x9;&#x9;get { return instance; }&#xA;&#x9;&#x9;&#x9;set { this.instance = value; }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public IEdgeInstance&lt;V, int> EdgeInstance {&#xA;&#x9;&#x9;&#x9;get { &#xA;&#x9;&#x9;&#x9;&#x9;IEdgeInstance&lt;V, int> e=null;&#xA;&#x9;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e = (IEdgeInstance&lt;V, int>)instance; &#xA;&#x9;&#x9;&#x9;&#x9;} catch {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new InvalidCastException (&quot;Cast Error: EInstance IEdgeImpl&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;return e;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IEdgeInstance&lt;V, T> InstanceTFactory&lt;T> (T s, T t){&#xA;&#x9;&#x9;&#x9;IEdgeInstance&lt;V, T> instanceT = new IEdgeInstanceImpl&lt;V, T> (s, t);&#xA;&#x9;&#x9;&#x9;return instanceT;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IEdgeInstance&lt;V, T> InstanceTFactory&lt;T> (T s, T t, float w){&#xA;&#x9;&#x9;&#x9;IEdgeInstance&lt;V, T> instanceT = new IEdgeInstanceImpl&lt;V, T> (s, t, w);&#xA;&#x9;&#x9;&#x9;return instanceT;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;[Serializable]&#xA;&#x9;public class IEdgeInstanceImpl&lt;V, TV> : IEdgeInstance&lt;V, TV> where V: IVertex{&#xA;&#x9;&#x9;public IEdgeInstanceImpl(){}&#xA;&#x9;&#x9;public IEdgeInstanceImpl(TV s, TV t):this(){&#xA;&#x9;&#x9;&#x9;this.source = s;&#xA;&#x9;&#x9;&#x9;this.target = t;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IEdgeInstanceImpl(TV s, TV t, float w):this(s, t){ this.Weight = w; }&#xA;&#xA;&#x9;&#x9;#region IEdgeInstance implementation&#xA;&#x9;&#x9;private TV source;&#xA;&#x9;&#x9;private TV target;&#xA;&#xA;&#x9;&#x9;public TV Source { get { return source; } set { this.source = value; } }&#xA;&#x9;&#x9;public TV Target { get { return target; } set { this.target = value; } }&#xA;&#x9;&#x9;public float Weight { get { return CommonFunc.WeightDefault; } set { CommonFunc.WeightDefault = value; } }&#xA;&#xA;&#x9;&#x9;public object ObjValue {&#xA;&#x9;&#x9;&#x9;get { return new Tuple&lt;TV,TV>(source,target); }&#xA;&#x9;&#x9;&#x9;set { &#xA;&#x9;&#x9;&#x9;&#x9;this.source = ((Tuple&lt;TV,TV>)value).Item1;&#xA;&#x9;&#x9;&#x9;&#x9;this.target = ((Tuple&lt;TV,TV>)value).Item2;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public override string ToString () { return CommonFunc.edgeToString(source.GetHashCode (), target.GetHashCode ()); }&#xA;&#x9;&#x9;public override bool Equals (object obj) {&#xA;&#x9;&#x9;&#x9;if (typeof(IEdgeInstance&lt;V, TV>).IsAssignableFrom (obj.GetType ())) {&#xA;&#x9;&#x9;&#x9;&#x9;IEdgeInstance&lt;V, TV> o = (IEdgeInstance&lt;V,TV>)obj;&#xA;&#x9;&#x9;&#x9;&#x9;if (o.Source.Equals(this.source) &amp;&amp; o.Target.Equals(this.target))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public override int GetHashCode () { return CommonFunc.pairingFunction (this.source.GetHashCode(), this.target.GetHashCode()); }&#xA;&#xA;&#x9;&#x9;public IEdgeInstance&lt;V,TV> newInstance () { return new IEdgeInstanceImpl&lt;V, TV> (); }&#xA;&#x9;&#x9;public IEdgeInstance&lt;V,TV> newInstance (TV s, TV t) { return new IEdgeInstanceImpl&lt;V, TV> (s,t); }&#xA;&#x9;&#x9;public IEdgeInstance&lt;V,TV> newInstance (TV s, TV t, float w) { return new IEdgeInstanceImpl&lt;V, TV> (s, t, w); }&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;#region ICloneable implementation&#xA;&#x9;&#x9;public object Clone () {&#xA;&#x9;&#x9;&#x9;IEdgeInstance&lt;V,TV> clone;&#xA;&#x9;&#x9;&#x9;Type[] types = this.GetType ().GenericTypeArguments;&#xA;&#x9;&#x9;&#x9;if (typeof(ICloneable).IsAssignableFrom (types [1])) {&#xA;&#x9;&#x9;&#x9;&#x9;return new IEdgeInstanceImpl&lt;V, TV> ((TV)((ICloneable)this.Source).Clone (), (TV)((ICloneable)this.Target).Clone ());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;try {return this.MemberwiseClone(); } catch (NotSupportedException e) { }&#xA;&#x9;&#x9;&#x9;clone = new IEdgeInstanceImpl&lt;V, TV> (source, target);&#xA;&#x9;&#x9;&#x9;return clone;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#x9;}&#xA;&#x9;internal static class CommonFunc{&#xA;&#x9;&#x9;public static float WeightDefault = 1.0f;&#xA;&#x9;&#x9;public static int pairingFunction (int a, int b) {&#xA;&#x9;&#x9;&#x9;var A = (ulong)(a >= 0 ? 2 * (long)a : -2 * (long)a - 1);&#xA;&#x9;&#x9;&#x9;var B = (ulong)(b >= 0 ? 2 * (long)b : -2 * (long)b - 1);&#xA;&#x9;&#x9;&#x9;var C = (long)((A >= B ? A * A + A + B : A + B * B) / 2);&#xA;&#x9;&#x9;&#x9;var R = a &lt; 0 &amp;&amp; b &lt; 0 || a >= 0 &amp;&amp; b >= 0 ? C : -C - 1;&#xA;&#x9;&#x9;&#x9;return (int)R;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public static string edgeToString(int a, int b) { return &quot;&quot; + a + &quot;,&quot; + b + &quot;&quot;; }&#xA;&#x9;}&#xA;}&#xA;" name="IEdgeImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.gust.graph.impl.EdgeImpl/bin/1.0.0.0/IEdgeImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Vertex/bin/1.0.0.0/IVertex.dll</dependency>
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.gust.graph.impl.EdgeImpl/bin/1.0.0.0/BaseIEdgeImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Edge/bin/1.0.0.0/IEdge.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="119" x="156" y="277">
        <color b="52" g="226" r="138"/>
      </visualDescription>
      <parameter iname="IVertex" order="0" parid="vertex_type" uname="data" varid="V"/>
    </interface>
    <unit facet="0" iRef="IEdgeImpl" multiple="false" private="false" replica="0" uRef="data" visibleInterface="true">
      <super cRef="base" uRef="data"/>
      <visualDescription h="40" w="80" x="241" y="378"/>
    </unit>
  </componentInfo>
</component:component>