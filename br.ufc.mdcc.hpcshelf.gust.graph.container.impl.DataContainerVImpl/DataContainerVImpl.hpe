<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c14b2179d6f92892a2d0f0ab4779cddf9139c0394a85238cdaee16578083e7e18770dcbf3e124932ab621164f78d9f9bb7ebc2893f8bab84b5fea38e76f6e3625d2d4c0189373b9dbec76edf64ecfc47be3b5a5eff2b2b4f8574121f0b0621029dbb68b9e8cfa05950f8dc4f841598d8bc9f820a38034b1e487afbe90aa699b2" isAbstract="false" kind="Data" name="DataContainerVImpl" packagePath="br.ufc.mdcc.hpcshelf.gust.graph.container.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000005403cf0b8b9fa166f9ab0623f2b275c7ec589c3d0263c645aa6ceecfa801470a216b1c0ebbde24417be0d824b99cc8f989f00942c1370b6f4b0a7d82156b82c09187f7dc20b00a935271852c002237f7cf819e62515b6d59319cdebfcb2c5345aed8091769fb8e73bbd5f2807e81c974207f24c0c8a441cede16b966054dacd" localRef="base" location="br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerV/DataContainerV.hpe" name="DataContainerV" package="br.ufc.mdcc.hpcshelf.gust.graph.container" version="1.0.0.0">
        <visualDescription h="60" w="100" x="360" y="345">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="vertex_type" varName="V"/>
        <parameter formFieldId="edge_type" varName="E"/>
        <port index_replica="0" localRef="vertex" location="br.ufc.mdcc.hpcshelf.gust.graph.Vertex/Vertex.hpe" multiple="false" name="Vertex" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="true">
          <visualDescription h="60" w="142" x="150" y="435">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="edgeFactory" location="br.ufc.mdcc.hpcshelf.gust.graph.Edge/Edge.hpe" multiple="false" name="Edge" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="true">
          <visualDescription h="60" w="161" x="491" y="426">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="vertex_type" varName="V"/>
          <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="data">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <innerComponent localRef="v" location="br.ufc.mdcc.hpcshelf.gust.graph.Vertex/Vertex.hpe" multiple="false" name="Vertex" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="true">
      <visualDescription h="60" w="142" x="150" y="435">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="e" location="br.ufc.mdcc.hpcshelf.gust.graph.Edge/Edge.hpe" multiple="false" name="Edge" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="true">
      <visualDescription h="60" w="161" x="491" y="426">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="vertex_type" varName="V"/>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="v" direct="true" varName="V"/>
    <supplyParameter cRef="e" direct="true" varName="E"/>
    <interface iRef="IDataContainerVImpl" nArgs="2">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerV;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.graph.container.impl.DataContainerVImpl &#xA;{&#xA;&#x9;public abstract class BaseIDataContainerVImpl&lt;V, E>: DataStructure, BaseIDataContainerV&lt;V, E>&#xA;&#x9;&#x9;where V:IVertex&#xA;&#x9;&#x9;where E:IEdge&lt;V>&#xA;&#x9;{&#xA;&#x9;&#x9;private E edgeFactory = default(E);&#xA;&#xA;&#x9;&#x9;public E EdgeFactory&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.edgeFactory == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.edgeFactory = (E) Services.getPort(&quot;edgeFactory&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.edgeFactory;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private V vertex = default(V);&#xA;&#xA;&#x9;&#x9;public V Vertex&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.vertex == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.vertex = (V) Services.getPort(&quot;vertex&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.vertex;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIDataContainerVImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.gust.graph.container.impl.DataContainerVImpl/bin/1.0.0.0/BaseIDataContainerVImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Edge/bin/1.0.0.0/IEdge.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Vertex/bin/1.0.0.0/IVertex.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerV/bin/1.0.0.0/BaseIDataContainerV.dll</dependency>
        </file>
        <file contents="using System;&#xA;using System.Collections.Generic;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.graph.container.impl.DataContainerVImpl&#xA;{&#xA;    public class IDataContainerVImpl&lt;V, E> : BaseIDataContainerVImpl&lt;V, E>, IDataContainerV&lt;V, E>&#xA;where V:IVertex&#xA;where E:IEdge&lt;V> {&#xA;&#x9;&#x9;public IDataContainerVImpl(){ }&#xA;&#x9;&#x9;override public void after_initialize () { &#xA;&#x9;&#x9;&#x9;newInstance (); &#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public object newInstance () {&#xA;&#x9;&#x9;&#x9;IVertexInstance v = (IVertexInstance)this.Vertex.newInstance ();&#xA;&#x9;&#x9;&#x9;IEdgeInstance&lt;V, int> e = (IEdgeInstance&lt;V, int>)this.EdgeFactory.newInstance ();&#xA;&#x9;&#x9;&#x9;instance = new IDataContainerVInstanceImpl&lt;V, E, int, IEdgeInstance&lt;V, int>> (v.Id, e, 0);&#xA;&#x9;&#x9;&#x9;return this.instance;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IDataContainerInstance&lt;V, E> instance;&#xA;&#x9;&#x9;public object Instance {&#xA;&#x9;&#x9;&#x9;get { return instance; }&#xA;&#x9;&#x9;&#x9;set { &#xA;&#x9;&#x9;&#x9;&#x9;this.instance = (IDataContainerInstance&lt;V, E>)value;&#xA;&#x9;&#x9;&#x9;&#x9;this.instance.PartitionID = 0; &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IDataContainerVInstance&lt;V, E, int, IEdgeInstance&lt;V, int>> DataContainerVInstance {&#xA;&#x9;&#x9;&#x9;get { return (IDataContainerVInstance&lt;V, E, int, IEdgeInstance&lt;V, int>>)instance; }&#xA;&#x9;&#x9;&#x9;set { &#xA;&#x9;&#x9;&#x9;&#x9;IDataContainerVInstance&lt;V, E, int, IEdgeInstance&lt;V, int>> dc = (IDataContainerVInstance&lt;V, E, int, IEdgeInstance&lt;V, int>>)value;&#xA;&#x9;&#x9;&#x9;&#x9;dc.PartitionID = 0; &#xA;&#x9;&#x9;&#x9;&#x9;this.instance = dc;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IDataContainerVInstance&lt;V, E, TV, TE> InstanceTFactory&lt;TV, TE> (TE e) where TE:IEdgeInstance&lt;V, TV>{&#xA;&#x9;&#x9;&#x9;TE ei = (TE)this.EdgeFactory.InstanceTFactory&lt;TV>(e.Source,e.Target,e.Weight);&#xA;&#x9;&#x9;&#x9;IDataContainerVInstance&lt;V, E, TV, TE> instanceT = new IDataContainerVInstanceImpl&lt;V, E, TV, TE> (ei.Source, ei, 0); &#xA;&#x9;&#x9;&#x9;return instanceT;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;[Serializable]&#xA;&#x9;public class IDataContainerVInstanceImpl&lt;V, E, TV, TE> : IDataContainerVInstance&lt;V, E, TV, TE> &#xA;&#x9;&#x9;where V: IVertex &#xA;&#x9;&#x9;where E:IEdge&lt;V> &#xA;&#x9;&#x9;where TE:IEdgeInstance&lt;V, TV> {&#xA;&#xA;&#x9;&#x9;public IDataContainerVInstanceImpl(){}&#xA;&#x9;&#x9;public IDataContainerVInstanceImpl(TV v, TE e, int part){&#xA;&#x9;&#x9;&#x9;this.vertex = v;&#xA;&#x9;&#x9;&#x9;this.edgeFactory = e;&#xA;&#x9;&#x9;&#x9;partition_id = part;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#region ICloneable implementation&#xA;&#x9;&#x9;public object Clone () {&#xA;&#x9;&#x9;&#x9;IDataContainerVInstanceImpl&lt;V, E, TV, TE> clone = new IDataContainerVInstanceImpl&lt;V, E, TV, TE> ();&#xA;&#x9;&#x9;&#x9;Type[] types = this.GetType ().GenericTypeArguments;&#xA;&#x9;&#x9;&#x9;if (typeof(ICloneable).IsAssignableFrom (types [2]))&#xA;&#x9;&#x9;&#x9;&#x9;clone.Vertex = (TV)((ICloneable)vertex).Clone ();&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;clone.Vertex = vertex;&#xA;&#x9;&#x9;&#x9;clone.EdgeFactory = (TE)edgeFactory.Clone ();&#xA;&#x9;&#x9;&#x9;clone.PartitionID = partition_id;&#xA;&#x9;&#x9;&#x9;clone.AllowingLoops = _allowingLoops;&#xA;&#x9;&#x9;&#x9;clone.AllowingMultipleEdges = _allowingMultipleEdges;&#xA;&#x9;&#x9;&#x9;clone.DataSet =  new Dictionary&lt;TV, IEdgeContainer&lt;TV>> (dataSet);&#xA;&#x9;&#x9;&#x9;return (IDataContainerVInstance&lt;V, E, TV, TE>) clone;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;#region IDataContainerVInstance implementation&#xA;&#x9;&#x9;private TV vertex;&#xA;&#x9;&#x9;private TE edgeFactory;&#xA;&#x9;&#x9;private int partition_id = 0;&#xA;&#x9;&#x9;private bool _allowingLoops = true;&#xA;&#x9;&#x9;private bool _allowingMultipleEdges = false; &#xA;&#x9;&#x9;private IDictionary&lt;TV, IEdgeContainer&lt;TV>> dataSet; &#xA;&#xA;&#x9;&#x9;public TV Vertex { get { return vertex; } set { this.vertex = (TV)value; } }&#xA;&#x9;&#x9;public TE EdgeFactory { get { return edgeFactory; } set { this.edgeFactory = (TE)value; } }&#xA;&#x9;&#x9;public int PartitionID { get { return partition_id; } set { this.partition_id = value; } }&#xA;&#x9;&#x9;public bool AllowingLoops{ get { return _allowingLoops; } set{ _allowingLoops = value; } }&#xA;&#x9;&#x9;public bool AllowingMultipleEdges{ get { return _allowingMultipleEdges; } set{ _allowingMultipleEdges = value; } }&#xA;&#x9;&#x9;public IDictionary&lt;TV, IEdgeContainer&lt;TV>> DataSet { &#xA;&#x9;&#x9;&#x9;get { if (dataSet == null) dataSet = new Dictionary&lt;TV, IEdgeContainer&lt;TV>> (); return dataSet; } &#xA;&#x9;&#x9;&#x9;set { dataSet = (IDictionary&lt;TV, IEdgeContainer&lt;TV>>)value; }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public object ObjValue {&#xA;&#x9;&#x9;&#x9;get { return new Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;TV>>>(vertex,edgeFactory,partition_id,_allowingLoops,_allowingMultipleEdges,dataSet); }&#xA;&#x9;&#x9;&#x9;set { &#xA;&#x9;&#x9;&#x9;&#x9;this.vertex =                 ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;TV>>>)value).Item1;&#xA;&#x9;&#x9;&#x9;&#x9;this.edgeFactory =            ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;TV>>>)value).Item2;&#xA;&#x9;&#x9;&#x9;&#x9;this.partition_id =          ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;TV>>>)value).Item3;&#xA;&#x9;&#x9;&#x9;&#x9;this._allowingLoops =         ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;TV>>>)value).Item4;&#xA;&#x9;&#x9;&#x9;&#x9;this._allowingMultipleEdges = ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;TV>>>)value).Item5;&#xA;&#x9;&#x9;&#x9;&#x9;this.dataSet =            ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;TV>>>)value).Item6;&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public void newDataSet (int size) {&#xA;&#x9;&#x9;&#x9;dataSet = new Dictionary&lt;TV, IEdgeContainer&lt;TV>> (size);&#xA;&#x9;&#x9;}&#xA;//&#x9;&#x9;public override bool Equals (object obj) {&#xA;//&#x9;&#x9;&#x9;if (typeof(IDataContainerVInstance&lt;V, E, TV, TE>).IsAssignableFrom (obj.GetType ())) {&#xA;//&#x9;&#x9;&#x9;&#x9;IDataContainerVInstance&lt;V, E, TV, TE> o = (IDataContainerVInstance&lt;V, E, TV, TE>)obj;&#xA;//&#x9;&#x9;&#x9;&#x9;if (o.PartitionID == this.PartitionID)&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;return true;&#xA;//&#x9;&#x9;&#x9;}&#xA;//&#x9;&#x9;&#x9;return false;&#xA;//&#x9;&#x9;}&#xA;//&#x9;&#x9;public override int GetHashCode () { return partition_id; }&#xA;&#x9;&#x9;#endregion&#xA;&#x9;}&#xA;}&#xA;" name="IDataContainerVImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.gust.graph.container.impl.DataContainerVImpl/bin/1.0.0.0/IDataContainerVImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Vertex/bin/1.0.0.0/IVertex.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Edge/bin/1.0.0.0/IEdge.dll</dependency>
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.gust.graph.container.impl.DataContainerVImpl/bin/1.0.0.0/BaseIDataContainerVImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerV/bin/1.0.0.0/IDataContainerV.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="216" x="135" y="144">
        <color b="52" g="226" r="138"/>
      </visualDescription>
      <parameter iname="IEdge" order="1" parid="edge_type" uname="data" varid="E"/>
      <parameter iname="IVertex" order="0" parid="vertex_type" uname="data" varid="V"/>
    </interface>
    <unit facet="0" iRef="IDataContainerVImpl" multiple="false" private="false" replica="0" uRef="data" visibleInterface="true">
      <super cRef="base" uRef="data"/>
      <visualDescription h="40" w="80" x="283" y="241"/>
    </unit>
  </componentInfo>
</component:component>