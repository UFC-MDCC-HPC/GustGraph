<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000cb543e4934a8f5cec490cd25d55df9ca53f6f33d23f2f3eaba95f08d74f9d63077a96aeaec74129b3e8916e3108c3123c54419481520e8e3ef61a1ea2189a7b6e400d4f3080ad7c878becfd6ff675f4866bab2cb23a9aed6f596fe81ae2510c69f1b8d8f7e6d8319d6cd44e8a5142994ed5eb12ec2010c363ec5f09488d52ac0" isAbstract="false" kind="Computation" name="PGRANKImpl" packagePath="br.ufc.mdcc.hpcshelf.gust.example.pgr">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c79bf844f7fddaf0fdc7e988448cf76995dde74601b4b2fe321ce10e31b24cf97ca3989c93f6bb51cfcdd6c966775c1dd638d1e65996be6ccca50bedf4af73e2599f23359a9b0e6cc48309ba354110850d826876c0e8314c222720b9fc495cca5592e2c12dc7fe5d8cd767d6872a705e7e424f1aa7c36cfc01cc078e7982a098" localRef="base" location="br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANK/PGRANK.hpe" name="PGRANK" package="br.ufc.mdcc.hpcshelf.gust.example.pgr" version="1.0.0.0">
        <visualDescription h="60" w="100" x="338" y="409">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <port index_replica="0" localRef="continuation_value" location="br.ufc.mdcc.hpcshelf.gust.example.pgr.DataPGRANK/DataPGRANK.hpe" multiple="false" name="DataPGRANK" package="br.ufc.mdcc.hpcshelf.gust.example.pgr" exposed="true">
          <visualDescription h="68" w="203" x="102" y="609">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="input_values" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="181" x="82" y="390">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="X###946480031"/>
          <parameter formFieldId="key_type" varName="TKey"/>
          <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="137" y="20"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="output_value" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="63" w="154" x="525" y="531">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="OValue"/>
          <parameter formFieldId="key_type" varName="OKey"/>
          <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="7" y="21"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="graph" location="br.ufc.mdcc.hpcshelf.gust.graph.DirectedGraph/DirectedGraph.hpe" multiple="false" name="DirectedGraph" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="true">
          <visualDescription h="60" w="146" x="369" y="604">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="edge_type" varName="X###1078507688"/>
          <parameter formFieldId="container" varName="X###1664128107"/>
          <parameter formFieldId="vertex_type" varName="X###1746054381"/>
          <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="output_messages" location="br.ufc.mdcc.common.Iterator/Iterator.hpe" multiple="false" name="Iterator" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="265" x="524" y="373">
            <color b="203" g="192" r="255"/>
          </visualDescription>
          <parameter formFieldId="item_type" varName="X###571945212"/>
          <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="iterator">
            <visualDescription h="20" w="20" x="19" y="23"/>
          </unitBounds>
        </port>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="reduce_function">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <interface iRef="IPGRANKImpl" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.InputFormat;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.pgr.DataPGRANK;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANK;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Graph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.DirectedGraph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerKV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeWeighted;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANKImpl&#xA;{&#xA;&#x9;public abstract class BaseIPGRANKImpl: Computation, BaseIPGRANK&#xA;&#x9;{&#xA;&#x9;&#x9;private IDirectedGraph&lt;IDataContainerKV&lt;IVertex, IEdgeWeighted&lt;IVertex>>, IVertex, IEdgeWeighted&lt;IVertex>> graph = null;&#xA;&#x9;&#x9;public IDirectedGraph&lt;IDataContainerKV&lt;IVertex, IEdgeWeighted&lt;IVertex>>, IVertex, IEdgeWeighted&lt;IVertex>> Graph&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.graph == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.graph = (IDirectedGraph&lt;IDataContainerKV&lt;IVertex, IEdgeWeighted&lt;IVertex>>, IVertex, IEdgeWeighted&lt;IVertex>>) Services.getPort(&quot;graph&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.graph;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IInteger, IDataPGRANK>> output_messages = null;&#xA;&#xA;&#x9;&#x9;public IIterator&lt;IKVPair&lt;IInteger, IDataPGRANK>> Output_messages&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_messages == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_messages = (IIterator&lt;IKVPair&lt;IInteger, IDataPGRANK>>) Services.getPort(&quot;output_messages&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_messages;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IKVPair&lt;IInteger, IIterator&lt;IDataPGRANK>> input_values = null;&#xA;&#xA;&#x9;&#x9;public IKVPair&lt;IInteger, IIterator&lt;IDataPGRANK>> Input_values&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_values == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_values = (IKVPair&lt;IInteger, IIterator&lt;IDataPGRANK>>) Services.getPort(&quot;input_values&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IData continuation_value = null;&#xA;&#xA;&#x9;&#x9;public IData Continuation_value&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.continuation_value == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.continuation_value = (IData) Services.getPort(&quot;continuation_value&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.continuation_value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IInputFormat input_format = null;&#xA;&#xA;&#x9;&#x9;protected IInputFormat Input_format&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_format == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_format = (IInputFormat) Services.getPort(&quot;input_format&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_format;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IKVPair&lt;IInteger, IDataPGRANK> output_value = null;&#xA;&#xA;&#x9;&#x9;public IKVPair&lt;IInteger, IDataPGRANK> Output_value&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_value == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_value = (IKVPair&lt;IInteger, IDataPGRANK>) Services.getPort(&quot;output_value&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIPGRANKImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANKImpl/bin/1.0.0.0/BaseIPGRANKImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.Iterator/bin/1.0.0.0/IIterator.dll</dependency>
          <dependency>br.ufc.mdcc.common.KVPair/bin/1.0.0.0/IKVPair.dll</dependency>
          <dependency>br.ufc.mdcc.common.Integer/bin/1.0.0.0/IInteger.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.pgr.DataPGRANK/bin/1.0.0.0/IDataPGRANK.dll</dependency>
          <dependency>br.ufc.mdcc.common.Data/bin/1.0.0.0/IData.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.InputFormat/bin/1.0.0.0/IInputFormat.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANK/bin/1.0.0.0/BaseIPGRANK.dll</dependency>
        </file>
        <file contents="using System;&#xA;using System.Collections.Generic;&#xA;using System.Collections.Concurrent;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.InputFormat;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.pgr.DataPGRANK;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANK;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Graph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.DirectedGraph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerKV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeWeighted;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANKImpl {&#xA;&#x9;public class IPGRANKImpl : BaseIPGRANKImpl, IPGRANK {&#xA;&#xA;&#x9;&#x9;private IDirectedGraphInstance&lt;IVertex, IEdgeWeighted&lt;IVertex>, int, IEdgeInstance&lt;IVertex, int>> g = null;&#xA;&#x9;&#x9;private int[] partition = null;&#xA;&#x9;&#x9;private bool[]  partition_own = null;&#xA;&#x9;&#x9;private int partition_size = 0;&#xA;&#x9;&#x9;private float nothing_outgoing = 0;&#xA;&#x9;&#x9;private float sum_nothings = 0.0f;&#xA;&#x9;&#x9;private int partid = 0;&#xA;&#x9;&#x9;private int iteration_sum = 0;&#xA;&#x9;&#x9;private int num_iteration = 30;&#xA;&#x9;&#x9;IDictionary&lt;int, float> before = null;&#xA;&#x9;&#x9;private IDictionary&lt;int, float>[] messages = null;&#xA;&#xA;&#x9;&#x9;public override void main() {}&#xA;&#x9;&#x9;public override void after_initialize() { }&#xA;&#x9;&#x9;public bool isGhost(int v){ return !partition_own[this.partition [v - 1]]; }&#xA;&#xA;&#x9;&#x9;#region Create Directed Graph Weight&#xA;&#x9;&#x9;public void graph_creator(){&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IIterator&lt;IInputFormat>> input_gifs_instance = (IKVPairInstance&lt;IInteger,IIterator&lt;IInputFormat>>)Graph_values.Instance;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IInputFormat> vgifs = (IIteratorInstance&lt;IInputFormat>)input_gifs_instance.Value;&#xA;&#xA;&#x9;&#x9;&#x9;object o;&#xA;&#x9;&#x9;&#x9;if (partition_own==null){&#xA;&#x9;&#x9;&#x9;&#x9;if (vgifs.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IInputFormatInstance gif = (IInputFormatInstance)o;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition = gif.PartitionTABLE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_size = gif.PARTITION_SIZE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g = Graph.newInstance (gif.VSIZE);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.DataContainer.AllowingLoops = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.DataContainer.AllowingMultipleEdges = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;graph_creator_aux (gif);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_own = new bool[partition_size];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_own [gif.PARTID] = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.partid = gif.PARTID;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;while (vgifs.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;graph_creator_aux ((IInputFormatInstance)o);&#xA;&#x9;&#x9;&#x9;&#x9;partition_own [((IInputFormatInstance)o).PARTID] = true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private void graph_creator_aux(IInputFormatInstance gif){&#xA;&#x9;&#x9;&#x9;for (int i = 0; i &lt; gif.ESIZE;i++) {&#xA;&#x9;&#x9;&#x9;&#x9;int s = gif.Source [i];&#xA;&#x9;&#x9;&#x9;&#x9;int t = gif.Target [i];&#xA;&#x9;&#x9;&#x9;&#x9;g.addVertex (s);&#xA;&#x9;&#x9;&#x9;&#x9;g.addVertex (t);&#xA;&#x9;&#x9;&#x9;&#x9;g.addEdge (s, t);&#xA;&#x9;&#x9;&#x9;&#x9;if (s == 0 || t==0) { throw new ArgumentNullException (&quot;WARNING: Vertex id is 0! &quot;); }&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IInputFormat>> output_gifs_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IInputFormat>>)Output_gif.Instance;&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IInputFormat> item = (IKVPairInstance&lt;IInteger,IInputFormat>)Output_gif.createItem ();&#xA;&#x9;&#x9;&#x9;((IIntegerInstance)item.Key).Value = gif.PARTID;&#xA;&#x9;&#x9;&#x9;item.Value = gif;&#xA;&#x9;&#x9;&#x9;output_gifs_instance.put (item);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;#region Algorithm implementation&#xA;&#x9;&#x9;public void startup_push() {&#xA;&#x9;&#x9;&#x9;before = new Dictionary&lt;int, float>(g.countV()+1);&#xA;&#x9;&#x9;&#x9;messages = new Dictionary&lt;int, float>[partition_size];&#xA;&#x9;&#x9;&#x9;for (int i = 0; i &lt; partition_size; i++) messages[i] = new Dictionary&lt;int, float> ();&#xA;&#xA;&#x9;&#x9;&#x9;ICollection&lt;int> vertices = g.vertexSet ();&#xA;&#x9;&#x9;&#x9;foreach (int v in vertices) {&#xA;&#x9;&#x9;&#x9;&#x9;if (!messages [partition [v - 1]].ContainsKey (v)) messages [partition [v - 1]] [v] = 0.0f;&#xA;&#x9;&#x9;&#x9;&#x9;if (!isGhost (v)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bool any = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;before [v] = 0.0f;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;int> n = g.iteratorOutgoingVertexOf (v);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (n.MoveNext ()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;any = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!messages [partition [n.Current - 1]].ContainsKey (n.Current)) messages [partition [n.Current - 1]] [n.Current] = 0.0f;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;messages [partition [n.Current - 1]] [n.Current] += 1.0f / g.outDegreeOf (v);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!any) nothing_outgoing+=1.0f;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;emite ();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public void gust0(){&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IDataPGRANK>> output_value_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IDataPGRANK>>)Output.Instance;&#xA;&#xA;&#x9;&#x9;&#x9;ICollection&lt;int> vertices = g.vertexSet ();&#xA;&#x9;&#x9;&#x9;foreach (int v in vertices)&#xA;&#x9;&#x9;&#x9;&#x9;if (!isGhost (v)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;before [v] = messages [partition [v - 1]] [v] + sum_nothings - before [v];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messages[partition [v - 1]] [v] = before [v];&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if(iteration_sum&lt;num_iteration)&#xA;&#x9;&#x9;&#x9;&#x9;foreach (int v in vertices) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!isGhost (v)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;bool any = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;int> n = g.iteratorOutgoingVertexOf (v);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (n.MoveNext ()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;any = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!messages [partition [n.Current - 1]].ContainsKey (n.Current)) messages [partition [n.Current - 1]] [n.Current] = 0.0f;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;messages [partition [n.Current - 1]] [n.Current] += before [v] / g.outDegreeOf (v);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!any) nothing_outgoing += before [v];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;emite ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void pull() {&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IIterator&lt;IDataPGRANK>> input_values_instance = (IKVPairInstance&lt;IInteger,IIterator&lt;IDataPGRANK>>)Input_values.Instance;&#xA;&#x9;&#x9;&#x9;IIntegerInstance ikey = (IIntegerInstance)input_values_instance.Key;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IDataPGRANK> ivalues = (IIteratorInstance&lt;IDataPGRANK>)input_values_instance.Value;&#xA;&#xA;&#x9;&#x9;&#x9;object o;&#xA;&#x9;&#x9;&#x9;while (ivalues.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;IDataPGRANKInstance VALUE = (IDataPGRANKInstance)o;&#xA;&#x9;&#x9;&#x9;&#x9;foreach (KeyValuePair&lt;int, float> kv in VALUE.Ranks)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messages [partition [kv.Key - 1]] [kv.Key] += kv.Value;&#xA;&#x9;&#x9;&#x9;&#x9;sum_nothings += VALUE.Slice;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private void emite(){&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IDataPGRANK>> output_value_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IDataPGRANK>>)Output.Instance;&#xA;&#x9;&#x9;&#x9;if (iteration_sum == num_iteration) {&#xA;&#x9;&#x9;&#x9;&#x9;output_value_instance.finish ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IDataPGRANK> ITEM = (IKVPairInstance&lt;IInteger,IDataPGRANK>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;((IIntegerInstance)ITEM.Key).Value = this.partid;&#xA;&#x9;&#x9;&#x9;&#x9;((IDataPGRANKInstance)ITEM.Value).Ranks = messages [((IIntegerInstance)ITEM.Key).Value];&#xA;&#x9;&#x9;&#x9;&#x9;output_value_instance.put (ITEM);&#xA;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; partition_size; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IDataPGRANK> ITEM = (IKVPairInstance&lt;IInteger,IDataPGRANK>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;((IIntegerInstance)ITEM.Key).Value = i;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (partition_own [i])&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((IDataPGRANKInstance)ITEM.Value).Ranks = new Dictionary&lt;int, float> ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((IDataPGRANKInstance)ITEM.Value).Ranks = messages [i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;messages [i] = new Dictionary&lt;int, float> ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;((IDataPGRANKInstance)ITEM.Value).Slice = nothing_outgoing / ((float)partition.Length);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;output_value_instance.put (ITEM);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;iteration_sum++;&#xA;&#x9;&#x9;&#x9;nothing_outgoing = 0.0f;&#xA;&#x9;&#x9;&#x9;sum_nothings = 0.0f;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#x9;}&#xA;}&#xA;" name="IPGRANKImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANKImpl/bin/1.0.0.0/IPGRANKImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANKImpl/bin/1.0.0.0/BaseIPGRANKImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANK/bin/1.0.0.0/IPGRANK.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="190" x="221" y="244">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IPGRANKImpl" multiple="false" private="false" replica="0" uRef="reduce_function" visibleInterface="true">
      <super cRef="base" uRef="reduce_function"/>
      <visualDescription h="40" w="190" x="258" y="334"/>
    </unit>
  </componentInfo>
</component:component>