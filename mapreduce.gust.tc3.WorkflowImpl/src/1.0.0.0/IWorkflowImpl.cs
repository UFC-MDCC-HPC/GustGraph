// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using br.ufc.mdcc.hpcshelf.platform.Maintainer;
using System;
using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;
using System.Threading;
using System.Collections.Generic;
using br.ufc.mdcc.hpcshelf.platform.maintainer.SAFeHost;
using mapreduce.gust.tc3.Workflow;
using br.ufc.mdcc.hpcshelf.mapreduce.port.task.advance.ChunkReadyActionType;
using br.ufc.mdcc.hpcshelf.mapreduce.port.task.advance.PerformActionType;
using br.ufc.mdcc.hpcshelf.mapreduce.port.task.advance.ReadChunkActionType;
using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvancePerform;
using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvanceChunkReady;
using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvanceReadChunk;
using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvance;


namespace mapreduce.gust.tc3.WorkflowImpl {


	public class IWorkflowImpl<M> :br.ufc.pargo.hpe.kinds.Computation ,IWorkflow<M> 
		where M:ISAFeHost
	{

		private void read_data_source()
		{
			Console.WriteLine ("read_data_source");
		}

		private void split_perform()
		{
			Console.WriteLine ("split_perform");
		}

		private void map_perform()
		{
			Console.WriteLine ("map_perform");
		}

		private void shuffle_perform()
		{
			Console.WriteLine ("shuffle_perform");
		}

		private void reduce_perform()
		{
			Console.WriteLine ("reduce_perform");
		}

		private void write_sink_source()
		{
			Console.WriteLine ("write_sink_source");
		}

		public override void main() 
		{
			// Task_map.TraceFlag = true;
			// Task_reduce.TraceFlag = true;
			// Task_shuffle_chunk_ready.TraceFlag = true;
			// Task_shuffle_perform.TraceFlag = true;
			// Task_split_input_chunk_ready.TraceFlag = true;
			// Task_split_input_perform.TraceFlag = true;
			// Task_split_input_read_chunk.TraceFlag = true;
			// Task_shuffle_read_chunk.TraceFlag = true;
			// Task_shuffle_chunk_ready.TraceFlag = true;
			// Task_shuffle_perform.TraceFlag = true;
			// Task_split_output_chunk_ready.TraceFlag = true;
			// Task_split_output_perform.TraceFlag = true;
			// Task_split_output_read_chunk.TraceFlag = true;

			Console.WriteLine ("STARTING WORKFLOW");

			// Consume the input from the data source.
			Thread t = new Thread ((ThreadStart)delegate() {
				while (true) {
					Task_split_input_read_chunk.invoke (READ_CHUNK.name);
					Task_split_input_perform.invoke (PERFORM.name);
				}
			});
			t.Start();

			Console.WriteLine ("STARTING WORKFLOW 2");

			// Preparing select guards.

			IActionFutureSet future_iteration = null;

			IActionFuture future_split_input_chunk_ready = null;
			Task_split_input_chunk_ready.invoke (CHUNK_READY.name, out future_split_input_chunk_ready);
			int action_id_split_input_chunk_ready = future_split_input_chunk_ready.GetHashCode ();
			future_iteration = future_split_input_chunk_ready.createSet ();

			IActionFuture future_map_chunk_ready = null;
			Task_map.invoke (CHUNK_READY.name, out future_map_chunk_ready);
			int action_id_map_chunk_ready = future_map_chunk_ready.GetHashCode ();
			future_iteration.addAction (future_map_chunk_ready);

			IActionFuture future_shuffle_chunk_ready = null; 
			Task_shuffle_chunk_ready.invoke (CHUNK_READY.name, out future_shuffle_chunk_ready);
			int action_id_shuffle_chunk_ready = future_shuffle_chunk_ready.GetHashCode ();
			future_iteration.addAction (future_shuffle_chunk_ready);

			IActionFuture future_reduce_chunk_ready = null;
			Task_reduce.invoke (CHUNK_READY.name, out future_reduce_chunk_ready);
			int action_id_reduce_chunk_ready = future_reduce_chunk_ready.GetHashCode ();
			future_iteration.addAction (future_reduce_chunk_ready);

			// Enable output.

			Thread t_output_chunk_ready = new Thread ((ThreadStart)delegate() {
				while (true)
					Task_split_output_chunk_ready.invoke (CHUNK_READY.name);
			});
			t_output_chunk_ready.Start ();

			Console.WriteLine ("STARTING WORKFLOW 3");

			bool terminate = false;
			do 
			{
				IActionFuture action = future_iteration.waitAny ();

				int action_id = action.GetHashCode();

				Console.WriteLine ("STARTING WORKFLOW 2 - after future_iteration.waitAny");

				if (action_id == action_id_split_input_chunk_ready) 
				{
					Console.WriteLine("WORKFLOW action_id_split_input_chunk_ready 1");

					Task_map.invoke (READ_CHUNK.name); 
					IActionFuture future_map_perform = null;
					Task_map.invoke (PERFORM.name, map_perform, out future_map_perform);

					Console.WriteLine("WORKFLOW action_id_split_input_chunk_ready 2");

					Task_split_input_chunk_ready.invoke (CHUNK_READY.name, out future_split_input_chunk_ready);
					action_id_split_input_chunk_ready = future_split_input_chunk_ready.GetHashCode ();
					future_iteration.addAction(future_split_input_chunk_ready);

					Console.WriteLine("WORKFLOW action_id_split_input_chunk_ready 3");
				}
				else if( action_id == action_id_map_chunk_ready) 
				{
					Console.WriteLine("WORKFLOW action_id_map_chunk_ready 1");
				
					Task_shuffle_read_chunk.invoke (READ_CHUNK.name);  
					IActionFuture future_shuffle_perform = null;
					Task_shuffle_perform.invoke (PERFORM.name, shuffle_perform, out future_shuffle_perform);

					Console.WriteLine("WORKFLOW action_id_map_chunk_ready 2");

					Task_map.invoke (CHUNK_READY.name, out future_map_chunk_ready);
					action_id_map_chunk_ready = future_map_chunk_ready.GetHashCode ();
					future_iteration.addAction(future_map_chunk_ready);

					Console.WriteLine("WORKFLOW action_id_map_chunk_ready 3");
				}
				else if (action_id == action_id_shuffle_chunk_ready)
				{
					Console.WriteLine("WORKFLOW action_id_shuffle_chunk_ready 1");

					Task_reduce.invoke (READ_CHUNK.name); 
					IActionFuture future_reduce_perform = null;
					Task_reduce.invoke (PERFORM.name, reduce_perform, out future_reduce_perform);

					Console.WriteLine("WORKFLOW action_id_shuffle_chunk_ready 2");

					Task_shuffle_chunk_ready.invoke (CHUNK_READY.name, out future_shuffle_chunk_ready);
					action_id_shuffle_chunk_ready = future_shuffle_chunk_ready.GetHashCode ();
					future_iteration.addAction(future_shuffle_chunk_ready);

					Console.WriteLine("WORKFLOW action_id_shuffle_chunk_ready 3");

				}
				else if (action_id == action_id_reduce_chunk_ready)
				{
					Console.WriteLine("WORKFLOW action_id_reduce_chunk_ready 1");

					Task_split_output_read_chunk.invoke (READ_CHUNK.name);  
					IActionFuture future_split_perform = null;
					Task_split_output_perform.invoke (PERFORM.name, split_perform, out future_split_perform);

					Console.WriteLine("WORKFLOW action_id_reduce_chunk_ready 2");

					Task_reduce.invoke (CHUNK_READY.name, out future_reduce_chunk_ready);
					action_id_reduce_chunk_ready = future_reduce_chunk_ready.GetHashCode ();
					future_iteration.addAction(future_reduce_chunk_ready);

					Console.WriteLine("WORKFLOW action_id_reduce_chunk_ready 3");
				} 
				else
					Console.WriteLine("UNEXPECTED ERROR: ACTION FUTURE NOT RECOGNIZED ! ");


			} while (!terminate) ;

			t.Join ();
			t_output_chunk_ready.Join ();

			Console.WriteLine("WORKFLOW FINISHED ! ");
		}
			
		private ITaskPort<ITaskPortTypeAdvancePerform> task_split_input_perform = null;
		protected ITaskPort<ITaskPortTypeAdvancePerform> Task_split_input_perform
		{ 
			get 
			{   if (task_split_input_perform == null)
				task_split_input_perform = (ITaskPort<ITaskPortTypeAdvancePerform>) this.Services.getPort ("task_split_input_perform");
				return task_split_input_perform;
			}
		}

		private ITaskPort<ITaskPortTypeAdvanceChunkReady> task_split_input_chunk_ready = null;
		protected ITaskPort<ITaskPortTypeAdvanceChunkReady> Task_split_input_chunk_ready
		{ 
			get 
			{   if (task_split_input_chunk_ready == null)
				task_split_input_chunk_ready = (ITaskPort<ITaskPortTypeAdvanceChunkReady>) this.Services.getPort ("task_split_input_chunk_ready");
				return task_split_input_chunk_ready;
			}
		}

		private ITaskPort<ITaskPortTypeAdvanceReadChunk> task_split_input_read_chunk = null;
		protected ITaskPort<ITaskPortTypeAdvanceReadChunk> Task_split_input_read_chunk
		{ 
			get 
			{   if (task_split_input_read_chunk == null)
				task_split_input_read_chunk = (ITaskPort<ITaskPortTypeAdvanceReadChunk>) this.Services.getPort ("task_split_input_read_chunk");
				return task_split_input_read_chunk;
			}
		}


		private ITaskPort<ITaskPortTypeAdvancePerform> task_split_output_perform = null;
		protected ITaskPort<ITaskPortTypeAdvancePerform> Task_split_output_perform
		{ 
			get 
			{   if (task_split_output_perform == null)
				task_split_output_perform = (ITaskPort<ITaskPortTypeAdvancePerform>) this.Services.getPort ("task_split_output_perform");
				return task_split_output_perform;
			}
		}

		private ITaskPort<ITaskPortTypeAdvanceChunkReady> task_split_output_chunk_ready = null;
		protected ITaskPort<ITaskPortTypeAdvanceChunkReady> Task_split_output_chunk_ready
		{ 
			get 
			{   if (task_split_output_chunk_ready == null)
				task_split_output_chunk_ready = (ITaskPort<ITaskPortTypeAdvanceChunkReady>) this.Services.getPort ("task_split_output_chunk_ready");
				return task_split_output_chunk_ready;
			}
		}

		private ITaskPort<ITaskPortTypeAdvanceReadChunk> task_split_output_read_chunk = null;
		protected ITaskPort<ITaskPortTypeAdvanceReadChunk> Task_split_output_read_chunk
		{ 
			get 
			{   if (task_split_output_read_chunk == null)
				task_split_output_read_chunk = (ITaskPort<ITaskPortTypeAdvanceReadChunk>) this.Services.getPort ("task_split_output_read_chunk");
				return task_split_output_read_chunk;
			}
		}
			
		private ITaskPort<ITaskPortTypeAdvancePerform> task_shuffle_perform = null;
		protected ITaskPort<ITaskPortTypeAdvancePerform> Task_shuffle_perform 
		{ 
			get 
			{   
				if (task_shuffle_perform == null)
					task_shuffle_perform = (ITaskPort<ITaskPortTypeAdvancePerform>) this.Services.getPort ("task_shuffle_perform");
				return task_shuffle_perform;
			}
		}

		private ITaskPort<ITaskPortTypeAdvanceChunkReady> task_shuffle_chunk_ready = null;
		protected ITaskPort<ITaskPortTypeAdvanceChunkReady> Task_shuffle_chunk_ready 
		{ 
			get 
			{   
				if (task_shuffle_chunk_ready == null)
					task_shuffle_chunk_ready = (ITaskPort<ITaskPortTypeAdvanceChunkReady>) this.Services.getPort ("task_shuffle_chunk_ready");
				return task_shuffle_chunk_ready;
			}
		}

		private ITaskPort<ITaskPortTypeAdvanceReadChunk> task_shuffle_read_chunk = null;
		protected ITaskPort<ITaskPortTypeAdvanceReadChunk> Task_shuffle_read_chunk 
		{ 
			get 
			{   
				if (task_shuffle_read_chunk == null)
					task_shuffle_read_chunk = (ITaskPort<ITaskPortTypeAdvanceReadChunk>) this.Services.getPort ("task_shuffle_read_chunk");
				return task_shuffle_read_chunk;
			}
		}

		private ITaskPort<ITaskPortTypeAdvance> task_reduce = null;
		protected ITaskPort<ITaskPortTypeAdvance> Task_reduce 
		{ 
			get 
			{   
				if (task_reduce == null)
					task_reduce = (ITaskPort<ITaskPortTypeAdvance>) this.Services.getPort ("task_reduce");
				return task_reduce;
			}
		}

		private ITaskPort<ITaskPortTypeAdvance> task_map = null;
		protected ITaskPort<ITaskPortTypeAdvance> Task_map 
		{ 
			get 
			{  
				if (task_map == null)
					task_map = (ITaskPort<ITaskPortTypeAdvance>) this.Services.getPort ("task_map");
				return task_map;
			}
		}


	}
}
