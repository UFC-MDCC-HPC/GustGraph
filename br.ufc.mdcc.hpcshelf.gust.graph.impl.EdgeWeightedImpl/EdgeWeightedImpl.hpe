<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000cf0bf91596531ce502180790995f83802cc0923ff04e30c047453326af4453687d63f5688f2839cad03ab96e258f9db56828398836ea02fabd8a97e5dcdb240ea9e6aa161f3f2bf47b2500ebcdff87f53b1a8698bf76f1685cb812aa9d849a63c95d0f06700a16c27378f911648d968ec89c56f780ad22aad598b202a09430c0" isAbstract="false" kind="Data" name="EdgeWeightedImpl" packagePath="br.ufc.mdcc.hpcshelf.gust.graph.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000379be81d41c8b549e2209b21e46c20784c8b792829f436ca11f01c315fa75be2aa60c87274b0f32bdbe0a0e3b9be54b0dcf2f9fefba602d3550421d876d56d6be1384110da446810fd005dc185796b578de6e5b89bd5394c48359d8395bf28d13ce154cf0694613e91eeeb0df74727302acff3476ddb516f8653635f53b80792" localRef="base" location="br.ufc.mdcc.hpcshelf.gust.graph.EdgeWeighted/EdgeWeighted.hpe" name="EdgeWeighted" package="br.ufc.mdcc.hpcshelf.gust.graph" version="1.0.0.0">
        <visualDescription h="60" w="100" x="253" y="543">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="vertex_type" varName="V"/>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="data">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <innerComponent localRef="v" location="br.ufc.mdcc.hpcshelf.gust.graph.Vertex/Vertex.hpe" multiple="false" name="Vertex" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="false">
      <visualDescription h="60" w="100" x="414" y="378">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="v" direct="true" varName="V"/>
    <interface iRef="IEdgeWeightedImpl" nArgs="1">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeWeighted;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.graph.impl.EdgeWeightedImpl {&#xA;&#x9;public abstract class BaseIEdgeWeightedImpl&lt;V>: DataStructure, BaseIEdgeWeighted&lt;V> where V:IVertex {&#xA;&#x9;&#x9;private IKVPair&lt;V,V> vertices = null;&#xA;&#xA;&#x9;&#x9;protected IKVPair&lt;V,V> Vertices {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.vertices == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.vertices = (IKVPair&lt;V,V>)Services.getPort (&quot;vertices&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.vertices;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIEdgeWeightedImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.gust.graph.impl.EdgeWeightedImpl/bin/1.0.0.0/BaseIEdgeWeightedImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.KVPair/bin/1.0.0.0/IKVPair.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Vertex/bin/1.0.0.0/IVertex.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.EdgeWeighted/bin/1.0.0.0/BaseIEdgeWeighted.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeWeighted;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.graph.impl.EdgeWeightedImpl {&#xA;&#x9;public class IEdgeWeightedImpl&lt;V> : BaseIEdgeWeightedImpl&lt;V>, IEdgeWeighted&lt;V> where V:IVertex {&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IEdgeWeightedImpl () { }&#xA;&#xA;&#x9;&#x9;override public void after_initialize () {&#xA;&#x9;&#x9;&#x9;newInstance (); &#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public object newInstance () {&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;V,V> kv = (IKVPairInstance&lt;V,V>)Vertices.newInstance ();&#xA;&#x9;&#x9;&#x9;this.instance = new IEdgeWeightedInstanceImpl&lt;V, int> (((IVertexInstance)kv.Key).Id, ((IVertexInstance)kv.Value).Id, 1.0f);&#xA;&#x9;&#x9;&#x9;return this.instance;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private object instance;&#xA;&#x9;&#x9;public object Instance {&#xA;&#x9;&#x9;&#x9;get { return instance; }&#xA;&#x9;&#x9;&#x9;set { this.instance = value; }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public IEdgeWeightedInstance&lt;V, int> EdgeWeightedInstance {&#xA;&#x9;&#x9;&#x9;get { &#xA;&#x9;&#x9;&#x9;&#x9;IEdgeWeightedInstance&lt;V, int> e=null;&#xA;&#x9;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e = (IEdgeWeightedInstance&lt;V, int>)instance; &#xA;&#x9;&#x9;&#x9;&#x9;} catch {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new InvalidCastException (&quot;Cast Error: IEdgeWeightedInstance&lt;V, int> IEdgeWeightedInstanceImpl&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;return e;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IEdgeInstance&lt;V, T> InstanceTFactory&lt;T> (T s, T t, float w){&#xA;&#x9;&#x9;&#x9;//IKVPairInstance&lt;V,V> kv = (IKVPairInstance&lt;V,V>)Vertices.newInstance ();&#xA;&#x9;&#x9;&#x9;IEdgeWeightedInstance&lt;V, T> instanceT = new IEdgeWeightedInstanceImpl&lt;V, T> (s, t, w);&#xA;&#x9;&#x9;&#x9;return instanceT;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IEdgeInstance&lt;V, T> InstanceTFactory&lt;T> (T s, T t){&#xA;&#x9;&#x9;&#x9;return InstanceTFactory&lt;T>(s,t,1.0f);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;[Serializable]&#xA;&#x9;public class IEdgeWeightedInstanceImpl&lt;V, TV> : IEdgeWeightedInstance&lt;V, TV> where V: IVertex{&#xA;&#x9;&#x9;public IEdgeWeightedInstanceImpl(){}&#xA;&#x9;&#x9;public IEdgeWeightedInstanceImpl(TV s, TV t, float w){&#xA;&#x9;&#x9;&#x9;this.source = s;&#xA;&#x9;&#x9;&#x9;this.target = t;&#xA;&#x9;&#x9;&#x9;this.weight = w;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#region IEdgeWeightedInstance implementation&#xA;&#x9;&#x9;private TV source;&#xA;&#x9;&#x9;private TV target;&#xA;&#x9;&#x9;private float weight = 1.0f;&#xA;&#xA;&#x9;&#x9;public TV Source { get { return source; } set { this.source = value; } }&#xA;&#x9;&#x9;public TV Target { get { return target; } set { this.target = value; } }&#xA;&#x9;&#x9;public float Weight { get { return weight; } set { this.weight = value; } }&#xA;&#xA;&#x9;&#x9;public object ObjValue {&#xA;&#x9;&#x9;&#x9;get { return new Tuple&lt;TV,TV,float>(source,target,weight); }&#xA;&#x9;&#x9;&#x9;set { &#xA;&#x9;&#x9;&#x9;&#x9;this.source = ((Tuple&lt;TV,TV,float>)value).Item1;&#xA;&#x9;&#x9;&#x9;&#x9;this.target = ((Tuple&lt;TV,TV,float>)value).Item2;&#xA;&#x9;&#x9;&#x9;&#x9;this.weight = ((Tuple&lt;TV,TV,float>)value).Item3;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public override int GetHashCode () {&#xA;&#x9;&#x9;&#x9;return CommonFunc.pairingFunction (this.source.GetHashCode(), this.target.GetHashCode());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public override string ToString () { return CommonFunc.edgeToString(source.GetHashCode(),target.GetHashCode(),weight);}&#xA;&#x9;&#x9;public override bool Equals (object obj) {&#xA;&#x9;&#x9;&#x9;if (typeof(IEdgeWeightedInstance&lt;V, TV>).IsAssignableFrom (obj.GetType ())) {&#xA;&#x9;&#x9;&#x9;&#x9;IEdgeWeightedInstance&lt;V, TV> o = (IEdgeWeightedInstance&lt;V, TV>)obj;&#xA;&#x9;&#x9;&#x9;&#x9;if (o.Source.Equals(this.source) &amp;&amp; o.Target.Equals(this.target))// &amp;&amp; o.Weight.Value == this.Weight.Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IEdgeInstance&lt;V,TV> newInstance () { return new IEdgeWeightedInstanceImpl&lt;V, TV> (); }&#xA;&#x9;&#x9;public IEdgeInstance&lt;V,TV> newInstance (TV s, TV t) { return new IEdgeWeightedInstanceImpl&lt;V, TV> (s,t, 1.0f); }&#xA;&#x9;&#x9;public IEdgeInstance&lt;V,TV> newInstance (TV s, TV t, float w) { return new IEdgeWeightedInstanceImpl&lt;V, TV> (s, t, w); }&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;#region ICloneable implementation&#xA;&#x9;&#x9;public object Clone () {&#xA;&#x9;&#x9;&#x9;IEdgeWeightedInstance&lt;V,TV> clone;&#xA;&#x9;&#x9;&#x9;Type[] types = this.GetType ().GenericTypeArguments;&#xA;&#x9;&#x9;&#x9;if (typeof(ICloneable).IsAssignableFrom (types [1])) {&#xA;&#x9;&#x9;&#x9;&#x9;return new IEdgeWeightedInstanceImpl&lt;V, TV> ((TV)((ICloneable)this.Source).Clone (), (TV)((ICloneable)this.Target).Clone (), 1.0f);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;try {return this.MemberwiseClone(); } catch (NotSupportedException e) { }&#xA;&#x9;&#x9;&#x9;clone = new IEdgeWeightedInstanceImpl&lt;V, TV> (source, target, 1.0f);&#xA;&#x9;&#x9;&#x9;return clone;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;}&#xA;&#x9;internal static class CommonFunc{&#xA;&#x9;&#x9;public static int pairingFunction (int a, int b) {&#xA;&#x9;&#x9;&#x9;var A = (ulong)(a >= 0 ? 2 * (long)a : -2 * (long)a - 1);&#xA;&#x9;&#x9;&#x9;var B = (ulong)(b >= 0 ? 2 * (long)b : -2 * (long)b - 1);&#xA;&#x9;&#x9;&#x9;var C = (long)((A >= B ? A * A + A + B : A + B * B) / 2);&#xA;&#x9;&#x9;&#x9;var R = a &lt; 0 &amp;&amp; b &lt; 0 || a >= 0 &amp;&amp; b >= 0 ? C : -C - 1;&#xA;&#x9;&#x9;&#x9;return (int)R;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public static string edgeToString(int a, int b, float w) { return &quot;&quot; + a + &quot;:&quot;+ b + &quot;|&quot;+string.Format(&quot;{0:N1}&quot;,w); }&#xA;&#x9;}&#xA;}&#xA;" name="IEdgeWeightedImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.gust.graph.impl.EdgeWeightedImpl/bin/1.0.0.0/IEdgeWeightedImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Vertex/bin/1.0.0.0/IVertex.dll</dependency>
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.gust.graph.impl.EdgeWeightedImpl/bin/1.0.0.0/BaseIEdgeWeightedImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.EdgeWeighted/bin/1.0.0.0/IEdgeWeighted.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="182" x="121" y="363">
        <color b="52" g="226" r="138"/>
      </visualDescription>
      <parameter iname="IVertex" order="0" parid="vertex_type" uname="data" varid="V"/>
    </interface>
    <unit facet="0" iRef="IEdgeWeightedImpl" multiple="false" private="false" replica="0" uRef="data" visibleInterface="true">
      <super cRef="base" uRef="data"/>
      <visualDescription h="40" w="80" x="195" y="450"/>
    </unit>
  </componentInfo>
</component:component>