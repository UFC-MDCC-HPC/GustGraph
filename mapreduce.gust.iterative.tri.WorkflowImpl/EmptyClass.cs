// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using br.ufc.mdcc.hpcshelf.platform.Maintainer;
using System;
using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;
using System.Threading;
using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvance;
using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeData;
using System.Collections.Generic;
using br.ufc.mdcc.hpcshelf.platform.maintainer.SAFeHost;
using mapreduce.Workflow;


namespace mapreduce.impl.WorkflowImpl {


	public class IWorkflowImpl<M> :br.ufc.pargo.hpe.kinds.Computation ,IWorkflow<M> 
		where M:ISAFeHost
	{

		private void read_data_source()
		{
			Console.WriteLine ("read_data_source");
		}

		private void split_perform()
		{
			Console.WriteLine ("split_perform");
		}

		private void map_perform()
		{
			Console.WriteLine ("map_perform");
		}

		private void shuffle_perform()
		{
			Console.WriteLine ("shuffle_perform");
		}

		private void reduce_perform()
		{
			Console.WriteLine ("reduce_perform");
		}

		private void write_sink_source()
		{
			Console.WriteLine ("write_sink_source");
		}

		public override void main() 
		{
			Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 1");

			Task_binding_data.TraceFlag = Task_map.TraceFlag = Task_reduce.TraceFlag = Task_binding_shuffle.TraceFlag = Task_binding_split_first.TraceFlag = Task_binding_split_next.TraceFlag = true;
			Task_binding_data.TraceFlag = Task_binding_shuffle.TraceFlag = Task_binding_split_first.TraceFlag = Task_binding_split_next.TraceFlag = true;

			IActionFutureSet future_iteration = null;

			Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 2-1");

			IActionFuture future_split_first_chunk_ready = null;
			Task_binding_split_first.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_first_chunk_ready);
			int action_id_split_first_chunk_ready = future_split_first_chunk_ready.GetHashCode ();
			future_iteration = future_split_first_chunk_ready.createSet ();

			Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 2-2");

			IActionFuture future_split_next_chunk_ready = null;
			Task_binding_split_next.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_next_chunk_ready);
			int action_id_split_next_chunk_ready = future_split_next_chunk_ready.GetHashCode ();
			future_iteration.addAction(future_split_next_chunk_ready)	;

			Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 3");

			IActionFuture future_map_chunk_ready = null;
			Task_map.invoke (ITaskPortAdvance.CHUNK_READY, out future_map_chunk_ready);
			int action_id_map_chunk_ready = future_map_chunk_ready.GetHashCode ();
			future_iteration.addAction (future_map_chunk_ready);

			Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 4");

			IActionFuture future_shuffle_chunk_ready = null; 
			Task_binding_shuffle.invoke (ITaskPortAdvance.CHUNK_READY, out future_shuffle_chunk_ready);
			int action_id_shuffle_chunk_ready = future_shuffle_chunk_ready.GetHashCode ();
			future_iteration.addAction (future_shuffle_chunk_ready);

			Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 4");

			IActionFuture future_reduce_chunk_ready = null;
			Task_reduce.invoke (ITaskPortAdvance.CHUNK_READY, out future_reduce_chunk_ready);
			int action_id_reduce_chunk_ready = future_reduce_chunk_ready.GetHashCode ();
			future_iteration.addAction (future_reduce_chunk_ready);

			Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 5");

			IActionFuture future_data_terminate = null; 
			Task_binding_data.invoke (ITaskPortData.TERMINATE, out future_data_terminate);
			future_iteration.addAction (future_data_terminate);
			int action_id_data_terminate = future_data_terminate.GetHashCode ();

			Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 6-1");

			Task_binding_data.invoke (ITaskPortData.READ_SOURCE);

			Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 6-2");

			Thread t = new Thread((ThreadStart)delegate() 
				{
					while (true) {
						Task_binding_split_first.invoke (ITaskPortAdvance.READ_CHUNK);
						Task_binding_split_first.invoke (ITaskPortAdvance.PERFORM);
					}
				});

			t.Start();

			Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 7");


			bool terminate = false;
			do 
			{
				Console.WriteLine (this.ThisFacetInstance + "/" + this.Rank + ": WORKFLOW 8 - LOOP");

				IActionFuture action = future_iteration.waitAny ();

				int action_id = action.GetHashCode();
				if (action_id == action_id_split_first_chunk_ready)
				{
					Task_map.invoke (ITaskPortAdvance.READ_CHUNK); 
					IActionFuture future_map_perform = null;
					Task_map.invoke (ITaskPortAdvance.PERFORM, map_perform, out future_map_perform);

					Task_binding_split_first.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_first_chunk_ready);
					action_id_split_first_chunk_ready = future_split_first_chunk_ready.GetHashCode ();
					future_iteration.addAction(future_split_first_chunk_ready);
				}
				else if (action_id == action_id_map_chunk_ready)
				{
					Task_binding_shuffle.invoke (ITaskPortAdvance.READ_CHUNK);   // 
					IActionFuture future_shuffle_perform = null;
					Task_binding_shuffle.invoke (ITaskPortAdvance.PERFORM, shuffle_perform, out future_shuffle_perform);

					Task_map.invoke (ITaskPortAdvance.CHUNK_READY, out future_map_chunk_ready);
					action_id_map_chunk_ready = future_map_chunk_ready.GetHashCode ();
					future_iteration.addAction(future_map_chunk_ready);
				}
				else if (action_id == action_id_shuffle_chunk_ready)
				{
					Task_reduce.invoke (ITaskPortAdvance.READ_CHUNK); // ****
					IActionFuture future_reduce_perform = null;
					Task_reduce.invoke (ITaskPortAdvance.PERFORM, reduce_perform, out future_reduce_perform);

					Task_binding_shuffle.invoke (ITaskPortAdvance.CHUNK_READY, out future_shuffle_chunk_ready);
					action_id_shuffle_chunk_ready = future_shuffle_chunk_ready.GetHashCode ();
					future_iteration.addAction(future_shuffle_chunk_ready);
				}
				else if (action_id == action_id_reduce_chunk_ready)
				{
					Task_binding_split_next.invoke (ITaskPortAdvance.READ_CHUNK);  // ****
					IActionFuture future_split_perform = null;
					Task_binding_split_next.invoke (ITaskPortAdvance.PERFORM, split_perform, out future_split_perform);

					Task_reduce.invoke (ITaskPortAdvance.CHUNK_READY, out future_reduce_chunk_ready);
					action_id_reduce_chunk_ready = future_reduce_chunk_ready.GetHashCode ();
					future_iteration.addAction(future_reduce_chunk_ready);

				}
				else if  (action_id == action_id_split_next_chunk_ready)
				{
					Task_map.invoke (ITaskPortAdvance.READ_CHUNK);   
					IActionFuture future_map_perform = null;
					Task_map.invoke (ITaskPortAdvance.PERFORM, map_perform, out future_map_perform);

					Task_binding_split_next.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_next_chunk_ready);
					action_id_split_next_chunk_ready = future_split_next_chunk_ready.GetHashCode ();
					future_iteration.addAction(future_split_next_chunk_ready);
				}	
				else if (action_id == action_id_data_terminate)
				{
					Task_binding_data.invoke (ITaskPortData.WRITE_SINK);
					terminate = true;
				}
				else
				{
					Console.WriteLine("UNEXPECTED ERROR: ACTION FUTURE NOT RECOGNIZED ! ");
				}

			} while (!terminate) ;

			t.Join ();

			Console.WriteLine("WORKFLOW FINISHED ! ");


		}

		private ITaskPort<ITaskPortTypeData> task_binding_data = null;
		protected ITaskPort<ITaskPortTypeData> Task_binding_data 
		{ 
			get 
			{   
				if (task_binding_data == null)
					task_binding_data = (ITaskPort<ITaskPortTypeData>)this.Services.getPort ("task_binding_data");
				return task_binding_data;
			}
		}

		private ITaskPort<ITaskPortTypeAdvance> task_binding_split_first = null;
		protected ITaskPort<ITaskPortTypeAdvance> Task_binding_split_first
		{ 
			get 
			{   if (task_binding_split_first == null)
				task_binding_split_first = (ITaskPort<ITaskPortTypeAdvance>) this.Services.getPort ("task_binding_split_first");
				return task_binding_split_first;
			}
		}

		private ITaskPort<ITaskPortTypeAdvance> task_binding_split_next = null;
		protected ITaskPort<ITaskPortTypeAdvance> Task_binding_split_next
		{ 
			get 
			{   if (task_binding_split_next == null)
				task_binding_split_next = (ITaskPort<ITaskPortTypeAdvance>) this.Services.getPort ("task_binding_split_next");
				return task_binding_split_next;
			}
		}

		private ITaskPort<ITaskPortTypeAdvance> task_binding_shuffle = null;
		protected ITaskPort<ITaskPortTypeAdvance> Task_binding_shuffle 
		{ 
			get 
			{   
				if (task_binding_shuffle == null)
					task_binding_shuffle = (ITaskPort<ITaskPortTypeAdvance>) this.Services.getPort ("task_binding_shuffle");
				return task_binding_shuffle;
			}
		}

		private ITaskPort<ITaskPortTypeAdvance> task_reduce = null;
		protected ITaskPort<ITaskPortTypeAdvance> Task_reduce 
		{ 
			get 
			{   
				if (task_reduce == null)
					task_reduce = (ITaskPort<ITaskPortTypeAdvance>) this.Services.getPort ("task_reduce");
				return task_reduce;
			}
		}

		private ITaskPort<ITaskPortTypeAdvance> task_map = null;
		protected ITaskPort<ITaskPortTypeAdvance> Task_map 
		{ 
			get 
			{  
				if (task_map == null)
					task_map = (ITaskPort<ITaskPortTypeAdvance>) this.Services.getPort ("task_map");
				return task_map;
			}
		}


	}
}
