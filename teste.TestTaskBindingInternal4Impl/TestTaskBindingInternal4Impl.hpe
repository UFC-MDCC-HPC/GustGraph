<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000bfa0a257495a83a1f1d9f4223016b082c5ad2615101015e5db65c2ce1b5f801824180f12e91e0008d7c23aa075d0c43b15cc85b5a0b52d372ff7cb62a8cc685f907f237d0e461ff31759955aef4a451c341e2f3bbcd98c0d10a312cb70802f195105f558a7a045ffb63a357d6fe0282a3353f36fb7841325617dc6ae759bc6b8" isAbstract="false" kind="Computation" name="TestTaskBindingInternal4Impl" packagePath="teste">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000051821304029111f8cce262a3d2680b3d37a1a0c10816bb93d3d11c50e3b7ba78219b7813e550908b08a2f4baf5a9bb75a77c097901e8983a2a92ea8506ef60fd4d595f61ca2cebb7b9e7fdada54fc68bfef6876d79da56dbf7fdf88df5117041ff0eb353336a82dbc0b24f663eb26ffe9d0a71f2b64e3d15205c005a1570e082" localRef="base" location="teste.TestTaskBindingInternal4/TestTaskBindingInternal4.hpe" name="TestTaskBindingInternal4" package="teste" version="1.0.0.0">
        <visualDescription h="60" w="100" x="273" y="577">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <unitBounds parallel="true" uRef="left_unit">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
        <unitBounds parallel="true" uRef="right_unit">
          <visualDescription h="20" w="20" x="28" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <interface iRef="ILeftUnitDImpl" nArgs="0">
      <slice isRef="task_binding_d">
        <originRef cRef="task_binding_d" iRef="ITaskPortExample"/>
        <visualDescription h="10" w="10" x="21" y="19"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingExample;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskPortTypeExample;&#xA;using teste.TestTaskBindingInternal4;&#xA;&#xA;namespace teste.TestTaskBindingInternal4Impl &#xA;{&#xA;&#x9;public abstract class BaseILeftUnitDImpl: Computation, BaseILeftUnitD&#xA;&#x9;{&#xA;&#x9;&#x9;private ITaskPortExample task_binding = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPortExample Task_binding&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.task_binding == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.task_binding = (ITaskPortExample) Services.getPort(&quot;task_binding&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.task_binding;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeExample> task_port = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeExample> Task_port&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.task_port == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.task_port = (ITaskPort&lt;ITaskPortTypeExample>) Services.getPort(&quot;task_port&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.task_port;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseILeftUnitDImpl.cs" srcType="base" uri="teste.TestTaskBindingInternal4Impl/bin/1.0.0.0/BaseILeftUnitDImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingExample/bin/1.0.0.0/ITaskPortExample.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskPortTypeExample/bin/1.0.0.0/ITaskPortTypeExample.dll</dependency>
          <dependency>teste.TestTaskBindingInternal4/bin/1.0.0.0/BaseILeftUnit.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using teste.TestTaskBindingInternal4;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskPortTypeExample;&#xA;using System.Threading;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingExample;&#xA;&#xA;namespace teste.TestTaskBindingInternal4Impl&#xA;{&#xA;&#x9;public class ILeftUnitDImpl : BaseILeftUnitDImpl, ILeftUnitD{&#xA;&#x9;&#x9;public override void main()&#x9;{&#xA;&#x9;&#x9;&#x9;writeFile (&quot;./LOG-ILeftUnitDImpl.TXT&quot;,this.PeerRank+&quot;: INICIO ILeftUnitDImpl&quot;, false);&#xA;&#x9;&#x9;&#x9;ITaskPort&lt;ITaskPortTypeExample> task_port = Task_port;&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: BEFORE LEFT INVOKE&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture action_future_0;&#xA;&#x9;&#x9;&#x9;Thread t0 = task_port.invoke (ITaskPortExampleAction.ACTION_0, reaction0, out action_future_0);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture action_future_1;&#xA;&#x9;&#x9;&#x9;Thread t1 = task_port.invoke (ITaskPortExampleAction.ACTION_1, reaction1, out action_future_1);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture action_future_2;&#xA;&#x9;&#x9;&#x9;Thread t2 = task_port.invoke (ITaskPortExampleAction.ACTION_2, reaction2, out action_future_2);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFutureSet action_future_set = action_future_0.createSet ();&#xA;&#x9;&#x9;&#x9;action_future_set.addAction (action_future_1);&#xA;&#x9;&#x9;&#x9;action_future_set.addAction (action_future_2);&#xA;&#xA;&#x9;&#x9;&#x9;//&#x9;action_future_set.waitAll ();&#xA;&#x9;&#x9;&#x9;while (action_future_set.Pending.Length > 0) {&#xA;&#x9;&#x9;&#x9;&#x9;IActionFuture action_future = action_future_set.waitAny ();&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: LEFT WAIT ANY&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: AFTER LEFT WAIT&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;t0.Join ();&#xA;&#x9;&#x9;&#x9;t1.Join ();&#xA;&#x9;&#x9;&#x9;t2.Join ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: AFTER LEFT INVOKE&quot;);&#xA;&#x9;&#x9;&#x9;writeFile (&quot;./LOG-ILeftUnitDImpl.TXT&quot;,&quot;FIM ILeftUnitDImpl&quot;, true);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void reaction0(){&#xA;&#x9;&#x9;&#x9;Thread.Sleep(6000);&#xA;&#x9;&#x9;&#x9;Console.WriteLine(this.PeerRank + &quot;: LEFT REACTION 0&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void reaction1(){&#xA;&#x9;&#x9;&#x9;Thread.Sleep(5000);&#xA;&#x9;&#x9;&#x9;Console.WriteLine(this.PeerRank + &quot;: LEFT REACTION 1&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void reaction2(){&#xA;&#x9;&#x9;&#x9;Thread.Sleep(7000);&#xA;&#x9;&#x9;&#x9;Console.WriteLine(this.PeerRank + &quot;: LEFT REACTION 2&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public static void writeFile(string PATH, string saida, bool manter){ &#xA;&#x9;&#x9;&#x9;using (System.IO.StreamWriter file = new System.IO.StreamWriter (@PATH, manter)) {&#xA;&#x9;&#x9;&#x9;&#x9;file.WriteLine (saida);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="ILeftUnitDImpl.cs" srcType="user" uri="teste.TestTaskBindingInternal4Impl/bin/1.0.0.0/ILeftUnitDImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/teste.TestTaskBindingInternal4Impl/bin/1.0.0.0/BaseILeftUnitDImpl.dll</dependency>
          <dependency>teste.TestTaskBindingInternal4/bin/1.0.0.0/ILeftUnit.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="134" x="99" y="389">
        <color b="0" g="128" r="0"/>
      </visualDescription>
      <port name="task_port_d">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_port" sRef="task_binding_d"/>
      </port>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <interface iRef="IRightUnitDImpl" nArgs="0">
      <slice isRef="task_binding_d">
        <originRef cRef="task_binding_d" iRef="ITaskPortExample"/>
        <visualDescription h="10" w="10" x="19" y="20"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingExample;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskPortTypeExample;&#xA;using teste.TestTaskBindingInternal4;&#xA;&#xA;namespace teste.TestTaskBindingInternal4Impl &#xA;{&#xA;&#x9;public abstract class BaseIRightUnitDImpl: Computation, BaseIRightUnitD&#xA;&#x9;{&#xA;&#x9;&#x9;private ITaskPortExample task_binding = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPortExample Task_binding&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.task_binding == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.task_binding = (ITaskPortExample) Services.getPort(&quot;task_binding&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.task_binding;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeExample> task_port = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeExample> Task_port&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.task_port == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.task_port = (ITaskPort&lt;ITaskPortTypeExample>) Services.getPort(&quot;task_port&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.task_port;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIRightUnitDImpl.cs" srcType="base" uri="teste.TestTaskBindingInternal4Impl/bin/1.0.0.0/BaseIRightUnitDImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingExample/bin/1.0.0.0/ITaskPortExample.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskPortTypeExample/bin/1.0.0.0/ITaskPortTypeExample.dll</dependency>
          <dependency>teste.TestTaskBindingInternal4/bin/1.0.0.0/BaseIRightUnit.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using teste.TestTaskBindingInternal4;&#xA;using System.Threading;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskPortTypeExample;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingExample;&#xA;&#xA;namespace teste.TestTaskBindingInternal4Impl&#xA;{&#xA;&#x9;public class IRightUnitDImpl : BaseIRightUnitDImpl, IRightUnitD&#xA;&#x9;{&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;writeFile (&quot;./LOG-IRightUnitDImpl.TXT&quot;,this.PeerRank+&quot;: INICIO IRightUnitDImpl&quot;, false);&#xA;&#x9;&#x9;&#x9;ITaskPort&lt;ITaskPortTypeExample> task_port = Task_port;&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: BEFORE RIGHT INVOKE&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture action_future_0;&#xA;&#x9;&#x9;&#x9;Thread t0 = task_port.invoke (ITaskPortExampleAction.ACTION_0, reaction0, out action_future_0);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture action_future_1;&#xA;&#x9;&#x9;&#x9;Thread t1 = task_port.invoke (ITaskPortExampleAction.ACTION_1, reaction1, out action_future_1);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture action_future_2;&#xA;&#x9;&#x9;&#x9;Thread t2 = task_port.invoke (ITaskPortExampleAction.ACTION_2, reaction2, out action_future_2);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFutureSet action_future_set = action_future_0.createSet ();&#xA;&#x9;&#x9;&#x9;action_future_set.addAction (action_future_1);&#xA;&#x9;&#x9;&#x9;action_future_set.addAction (action_future_2);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;PeerRank:&quot;+this.PeerRank+&quot; future action pending&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;//&#x9;action_future_set.waitAll ();&#xA;&#x9;&#x9;&#x9;while (action_future_set.Pending.Length > 0) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;IActionFuture action_future = action_future_set.waitAny ();&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: RIGHT WAIT ANY&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: AFTER RIGHT WAIT&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;t0.Join ();&#xA;&#x9;&#x9;&#x9;t1.Join ();&#xA;&#x9;&#x9;&#x9;t2.Join ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: AFTER  INVOKE&quot;);&#xA;&#x9;&#x9;&#x9;writeFile (&quot;./LOG-IRightUnitDImpl.TXT&quot;,&quot;FIM IRightUnitDImpl&quot;, true);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void reaction0()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Thread.Sleep(6000);&#xA;&#x9;&#x9;&#x9;Console.WriteLine(this.PeerRank + &quot;: RIGHT REACTION 0&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void reaction1()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Thread.Sleep(5000);&#xA;&#x9;&#x9;&#x9;Console.WriteLine(this.PeerRank + &quot;: RIGHT REACTION 1&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void reaction2()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Thread.Sleep(7000);&#xA;&#x9;&#x9;&#x9;Console.WriteLine(this.PeerRank + &quot;: RIGHT REACTION 2&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public static void writeFile(string PATH, string saida, bool manter){ &#xA;&#x9;&#x9;&#x9;using (System.IO.StreamWriter file = new System.IO.StreamWriter (@PATH, manter)) {&#xA;&#x9;&#x9;&#x9;&#x9;file.WriteLine (saida);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="IRightUnitDImpl.cs" srcType="user" uri="teste.TestTaskBindingInternal4Impl/bin/1.0.0.0/IRightUnitDImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/teste.TestTaskBindingInternal4Impl/bin/1.0.0.0/BaseIRightUnitDImpl.dll</dependency>
          <dependency>teste.TestTaskBindingInternal4/bin/1.0.0.0/IRightUnit.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="140" x="308" y="389">
        <color b="0" g="128" r="0"/>
      </visualDescription>
      <port name="task_port_d">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_port" sRef="task_binding_d"/>
      </port>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="ILeftUnitDImpl" multiple="true" private="false" replica="0" uRef="left_unit" visibleInterface="true">
      <super cRef="base" uRef="left_unit"/>
      <visualDescription h="40" w="80" x="129" y="473"/>
    </unit>
    <unit facet="0" iRef="IRightUnitDImpl" multiple="true" private="false" replica="0" uRef="right_unit" visibleInterface="true">
      <super cRef="base" uRef="right_unit"/>
      <visualDescription h="40" w="80" x="378" y="491"/>
    </unit>
  </componentInfo>
</component:component>