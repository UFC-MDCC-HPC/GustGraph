// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using br.ufc.mdcc.hpcshelf.mapreduce.computation.Mapper;
using br.ufc.mdcc.hpcshelf.mapreduce.connector.Shuffler;
using br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter;
using br.ufc.pargo.hpe.kinds;
using System.Threading;
using mapreduce.System;
using System;


namespace mapreduce.impl.SystemImpl {
    
    
	public class IPeer_2Impl : br.ufc.pargo.hpe.kinds.Application, IPeer_2 {
        
        private void Go(object o) 
		{
            ((Activate)(o)).go();
        }
        
        public override void main() 
		{
			Console.WriteLine ("SYSTEM - CONNECTING TO MAPPER 1!");
			var mapper_slice = this.Services.getPort("mapper");
			IMapper<br.ufc.mdcc.common.Integer.IInteger, br.ufc.mdcc.common.String.IString, br.ufc.mdcc.common.String.IString, br.ufc.mdcc.common.Integer.IInteger,br.ufc.mdcc.hpcshelf.mapreduce.example.cw.WordCounter.IWordCounter> mapper = (IMapper<br.ufc.mdcc.common.Integer.IInteger, br.ufc.mdcc.common.String.IString, br.ufc.mdcc.common.String.IString, br.ufc.mdcc.common.Integer.IInteger,br.ufc.mdcc.hpcshelf.mapreduce.example.cw.WordCounter.IWordCounter>) mapper_slice;
			Thread go_mapper = new Thread (new ParameterizedThreadStart(this.Go));
			go_mapper.Start(mapper);

			Console.WriteLine ("SYSTEM - CONNECTING TO SPLITTER !");
			var splitter_slice = this.Services.getPort("splitter");
			ISplitterMapFeeder<br.ufc.mdcc.common.Integer.IInteger, br.ufc.mdcc.common.String.IString> splitter = (ISplitterMapFeeder<br.ufc.mdcc.common.Integer.IInteger, br.ufc.mdcc.common.String.IString>) splitter_slice;
			Thread go_splitter = new Thread (new ParameterizedThreadStart(this.Go));
            go_splitter.Start(splitter);

			Console.WriteLine ("SYSTEM - CONNECTING TO SHUFFLER 1 !");
			var shuffler_slice = this.Services.getPort("shuffler");
			Console.WriteLine ("SYSTEM - CONNECTING TO SHUFFLER 2 !");
			IShufflerMapCollector<br.ufc.mdcc.common.String.IString,br.ufc.mdcc.common.Integer.IInteger,br.ufc.mdcc.hpcshelf.mapreduce.custom.PartitionFunction.IPartitionFunction<br.ufc.mdcc.common.String.IString>> shuffler = (IShufflerMapCollector<br.ufc.mdcc.common.String.IString,br.ufc.mdcc.common.Integer.IInteger,br.ufc.mdcc.hpcshelf.mapreduce.custom.PartitionFunction.IPartitionFunction<br.ufc.mdcc.common.String.IString>>) shuffler_slice;
			Thread go_shuffler = new Thread (new ParameterizedThreadStart(this.Go));
            go_shuffler.Start(shuffler);

			Console.WriteLine ("MAPPER, SPLITTER and SHUFFLER started !");

            go_mapper.Join();
            go_splitter.Join();
            go_shuffler.Join(); 

			Console.WriteLine ("MAPPER, SPLITTER and SHUFFLER joined !");
        }
    }
}
