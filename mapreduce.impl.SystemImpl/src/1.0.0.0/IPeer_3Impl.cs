// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using br.ufc.mdcc.hpcshelf.mapreduce.computation.Reducer;
using br.ufc.mdcc.hpcshelf.mapreduce.connector.Shuffler;
using br.ufc.mdcc.hpcshelf.mapreduce.connector.Splitter;
using br.ufc.pargo.hpe.kinds;
using System.Threading;
using mapreduce.System;
using br.ufc.mdcc.common.String;
using br.ufc.mdcc.common.Integer;


namespace mapreduce.impl.SystemImpl {
    
    
	public class IPeer_3Impl : br.ufc.pargo.hpe.kinds.Application, IPeer_3 {
        
        private void Go(object o) {
            ((Activate)(o)).go();
        }
        
        public override void main() {
			IReducer<IString, IInteger, IString, IInteger,br.ufc.mdcc.hpcshelf.mapreduce.example.cw.Tallier.ITallier> reducer = ((IReducer<IString, IInteger, IString, IInteger,br.ufc.mdcc.hpcshelf.mapreduce.example.cw.Tallier.ITallier>)(this.Services.getPort("reducer")));
			Thread go_reducer = new Thread (new ParameterizedThreadStart(this.Go));
            go_reducer.Start(reducer);
			ISplitterReduceCollector<IInteger, IString, IString, IInteger, br.ufc.mdcc.hpcshelf.mapreduce.custom.PartitionFunction.IPartitionFunction<IInteger>> splitter = ((ISplitterReduceCollector<IInteger, IString, IString, IInteger, br.ufc.mdcc.hpcshelf.mapreduce.custom.PartitionFunction.IPartitionFunction<IInteger>>)(this.Services.getPort("splitter")));
			Thread go_splitter = new Thread (new ParameterizedThreadStart(this.Go));
            go_splitter.Start(splitter);
            IShufflerReduceFeeder<IString, IInteger> shuffler = ((IShufflerReduceFeeder<IString, IInteger>)(this.Services.getPort("shuffler")));
			Thread go_shuffler = new Thread (new ParameterizedThreadStart(this.Go));
            go_shuffler.Start(shuffler);
            go_reducer.Join();
            go_splitter.Join();
            go_shuffler.Join();
        }
    }
}
