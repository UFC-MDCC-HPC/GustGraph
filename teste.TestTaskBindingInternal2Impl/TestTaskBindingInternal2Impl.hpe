<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000000b7c557b3cf677433b0aef90a4beef99a0d6a6f6887627fb849fcb7f01cc48e4edef59f85a0c6f1f846a05a11075c6f4fabbcec401972871f370ad6cc7fa6582d0797fdcb2eaa69ec6481a921a69b1f7b198c39bf9af8d97e6710eb48ed2c60e9d5275d084185b5d125e48c9e759d3e0e6d69d3542b53101fbac26f846fc0c94" isAbstract="false" kind="Computation" name="TestTaskBindingInternal2Impl" packagePath="teste">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="00240000048000009400000006020000002400005253413100040000110000003313a02a9e03e7e03f601b7b485e1a5440218eb81a48cf3553e41084e9be639da665c6cbc20dee76fca20c6d88cd835f4313b2063bc9454dc81a4f2ad71aea4a248a71663164429e16f1b859814e9e2a3b3458848f64558e2a0c123b038fe000d7efb6e9d137c7a4999ffaaba506ddf25554411ac883b5b3aa7220eceb065dd9" localRef="base" location="teste.TestTaskBindingInternal2/TestTaskBindingInternal2.hpe" name="TestTaskBindingInternal2" package="teste" version="1.0.0.0">
        <visualDescription h="60" w="100" x="134" y="480">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <unitBounds parallel="true" uRef="right_unit">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <interface iRef="IRightUnitImpl" nArgs="0">
      <slice isRef="task_binding">
        <originRef cRef="task_binding" iRef="ITaskPort"/>
        <visualDescription h="10" w="10" x="37" y="27"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskPortTypeExample;&#xA;using teste.TestTaskBindingInternal2;&#xA;&#xA;namespace teste.TestTaskBindingInternal2Impl &#xA;{&#xA;&#x9;public abstract class BaseIRightUnitImpl: Computation, BaseIRightUnit&#xA;&#x9;{&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeExample> task_binding = null;&#xA;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeExample> Task_binding&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.task_binding == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.task_binding = (ITaskPort&lt;ITaskPortTypeExample>) Services.getPort(&quot;task_binding&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.task_binding;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIRightUnitImpl.cs" srcType="base" uri="teste.TestTaskBindingInternal2Impl/bin/1.0.0.0/BaseIRightUnitImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/ITaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskPortTypeExample/bin/1.0.0.0/ITaskPortTypeExample.dll</dependency>
          <dependency>teste.TestTaskBindingInternal2/bin/1.0.0.0/BaseIRightUnit.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using teste.TestTaskBindingInternal2;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskPortTypeExample;&#xA;using System.Threading;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskPortType;&#xA;&#xA;namespace teste.TestTaskBindingInternal2Impl&#xA;{&#xA;&#x9;public class IRightUnitImpl : BaseIRightUnitImpl, IRightUnit&#xA;&#x9;{&#xA;&#x9;&#x9;public override void on_initialize ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;ActionDef.action_ids[ITaskPortExampleAction.ACTION_0] = 10;&#xA;&#x9;&#x9;&#x9;ActionDef.action_ids[ITaskPortExampleAction.ACTION_1] = 11;&#xA;&#x9;&#x9;&#x9;ActionDef.action_ids[ITaskPortExampleAction.ACTION_2] = 12;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;writeFile (&quot;./LOG-IRightUnitImpl.TXT&quot;,&quot;INICIO IRightUnitImpl&quot;, false);&#xA;&#x9;&#x9;&#x9;ITaskPort&lt;ITaskPortTypeExample> task_port = Task_binding; //Task_port;&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: BEFORE RIGHT INVOKE&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture action_future_0;&#xA;&#x9;&#x9;&#x9;Thread t0 = task_port.invoke (ITaskPortExampleAction.ACTION_0, reaction0, out action_future_0);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture action_future_1;&#xA;&#x9;&#x9;&#x9;Thread t1 = task_port.invoke (ITaskPortExampleAction.ACTION_1, reaction1, out action_future_1);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture action_future_2;&#xA;&#x9;&#x9;&#x9;Thread t2 = task_port.invoke (ITaskPortExampleAction.ACTION_2, reaction2, out action_future_2);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFutureSet action_future_set = action_future_0.createSet ();&#xA;&#x9;&#x9;&#x9;action_future_set.addAction (action_future_1);&#xA;&#x9;&#x9;&#x9;action_future_set.addAction (action_future_2);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;PeerRank:&quot;+this.PeerRank+&quot; future action pending&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;//&#x9;action_future_set.waitAll ();&#xA;&#x9;&#x9;&#x9;while (action_future_set.Pending.Length > 0) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;IActionFuture action_future = action_future_set.waitAny ();&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: RIGHT WAIT ANY&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: AFTER RIGHT WAIT&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;t0.Join ();&#xA;&#x9;&#x9;&#x9;t1.Join ();&#xA;&#x9;&#x9;&#x9;t2.Join ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.PeerRank + &quot;: AFTER  INVOKE&quot;);&#xA;&#x9;&#x9;&#x9;writeFile (&quot;./LOG-IRightUnitImpl.TXT&quot;,&quot;FIM IRightUnitImpl&quot;, true);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void reaction0()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Thread.Sleep(6000);&#xA;&#x9;&#x9;&#x9;Console.WriteLine(this.PeerRank + &quot;: RIGHT REACTION 0&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void reaction1()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Thread.Sleep(5000);&#xA;&#x9;&#x9;&#x9;Console.WriteLine(this.PeerRank + &quot;: RIGHT REACTION 1&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;void reaction2()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Thread.Sleep(7000);&#xA;&#x9;&#x9;&#x9;Console.WriteLine(this.PeerRank + &quot;: RIGHT REACTION 2&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public static void writeFile(string PATH, string saida, bool manter){ &#xA;&#x9;&#x9;&#x9;using (System.IO.StreamWriter file = new System.IO.StreamWriter (@PATH, manter)) {&#xA;&#x9;&#x9;&#x9;&#x9;file.WriteLine (saida);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="IRightUnitImpl.cs" srcType="user" uri="teste.TestTaskBindingInternal2Impl/bin/1.0.0.0/IRightUnitImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/teste.TestTaskBindingInternal2Impl/bin/1.0.0.0/BaseIRightUnitImpl.dll</dependency>
          <dependency>teste.TestTaskBindingInternal2/bin/1.0.0.0/IRightUnit.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="132" x="57" y="293">
        <color b="255" g="144" r="30"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IRightUnitImpl" multiple="true" private="false" replica="0" uRef="right_unit" visibleInterface="true">
      <super cRef="base" uRef="right_unit"/>
      <visualDescription h="40" w="80" x="98" y="393"/>
    </unit>
  </componentInfo>
</component:component>