<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000001724de912127ff9f497ba35aa847f67734f426b4db0ab5077b59231c6eeb48118ae96601399afdb8da80026f751df458a6369df4cd0e0f7cacc97e3a67f8a871a30f310d29665fe22cbf1b8fb7b8eff76fb63f207803895fea7b005da0b48720a03143af63a419b1a030ceec36f9a422dbae1c3b229e8576089f3d2684676a85" isAbstract="false" kind="Data" name="IteratorImpl" packagePath="br.ufc.mdcc.common.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000089eae6f7601e234f22f524b3e84f7069a6b49df028577fe9ff7af7cdde2cc2041e1d3d7761bf88f805c4d25661b760b9c129086791c4e48a48f8f81750bee1d42eb78082ede5341986c2a163e22cd08202285b6d7956c55fc7f2da4d1c299e12a114371316f1e395af2009c9eddae01851eda941c6242af1c3d95d2bff4243ae" localRef="base" location="br.ufc.mdcc.common.Iterator/Iterator.hpe" name="Iterator" package="br.ufc.mdcc.common" version="1.0.0.0">
        <visualDescription h="60" w="100" x="69" y="119">
          <color b="203" g="192" r="255"/>
        </visualDescription>
        <parameter formFieldId="item_type" varName="T"/>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="iterator">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <innerComponent localRef="item_type" location="br.ufc.mdcc.common.Data/Data.hpe" multiple="false" name="Data" package="br.ufc.mdcc.common" exposed="false">
      <visualDescription h="60" w="100" x="94" y="356">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="item_type" direct="true" varName="T"/>
    <interface iRef="IIteratorImpl" nArgs="1">
      <slice isRef="item_factory">
        <originRef cRef="item_factory" iRef="IData"/>
        <visualDescription h="10" w="10" x="22" y="26"/>
      </slice>
      <slice isRef="port_type">
        <originRef cRef="port_type" iRef="IPortTypeIterator"/>
        <visualDescription h="10" w="10" x="25" y="1"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator;&#xA;&#xA;namespace br.ufc.mdcc.common.impl.IteratorImpl { &#xA;&#xA;public abstract class BaseIIteratorImpl&lt;T>: DataStructure, BaseIIterator&lt;T>&#xA;where T:IData&#xA;{&#xA;&#xA;&#x9;&#x9;private T item_factory = default(T);&#xA;&#xA;&#x9;&#x9;protected T Item_factory {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.item_factory == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.item_factory = (T) Services.getPort(&quot;item_factory&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.item_factory;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IPortTypeIterator port_type = null;&#xA;&#xA;&#x9;&#x9;protected IPortTypeIterator Port_type&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.port_type == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.port_type = (IPortTypeIterator) Services.getPort(&quot;port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.port_type;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;}&#xA;&#xA;}&#xA;" name="BaseIIteratorImpl.cs" srcType="base" uri="br.ufc.mdcc.common.impl.IteratorImpl/bin/1.0.0.0/BaseIIteratorImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.Data/bin/1.0.0.0/IData.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator/bin/1.0.0.0/IPortTypeIterator.dll</dependency>
          <dependency>br.ufc.mdcc.common.Iterator/bin/1.0.0.0/BaseIIterator.dll</dependency>
        </file>
        <file contents="using System;&#xA;using System.Collections.Concurrent;&#xA;using System.Diagnostics;&#xA;using System.Runtime.Serialization;&#xA;using System.Threading;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator;&#xA;&#xA;namespace br.ufc.mdcc.common.impl.IteratorImpl&#xA;{&#xA;    public class IIteratorImpl&lt;T> : BaseIIteratorImpl&lt;T>, IIterator&lt;T>&#xA;&#x9;where T:IData&#xA;&#x9;{&#xA;&#x9;&#x9;public IIteratorImpl() { } &#xA;&#xA;&#x9;&#x9;override public void after_initialize()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;newInstance(); &#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public IIteratorInstance&lt;T> newIteratorInstance ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return (IIteratorInstance&lt;T>) newInstance ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public object newInstance ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return this.Instance = new IIteratorInstanceImpl&lt;T>((ICloneable)this.Item_factory.Instance);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IIteratorInstance&lt;T> instance;&#xA;&#xA;&#x9;&#x9;public object Instance {&#xA;            get { if (instance == null) newInstance(); return instance; }&#xA;&#x9;&#x9;&#x9;set { this.instance = (IIteratorInstance&lt;T>) value; }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public object createItem ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return Item_factory.newInstance ();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;[Serializable]&#xA;&#x9;public class IIteratorInstanceImpl&lt;T> : IIteratorInstance&lt;T>, ISerializable, IPortTypeIterator&#xA;&#x9;&#x9;where T:IData&#xA;&#x9;{&#xA;&#x9;&#x9;#region ICloneable implementation&#xA;&#xA;&#x9;&#x9;public object Clone ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;IIteratorInstanceImpl&lt;T> clone = new IIteratorInstanceImpl&lt;T> (item_factory);&#xA;&#x9;&#x9;&#x9;Option&lt;object>[] items_array = this.items.ToArray ();&#xA;&#x9;&#x9;&#x9;foreach (Option&lt;object> c in items_array) &#xA;&#x9;&#x9;&#x9;&#x9;clone.items.Enqueue (c);&#xA;&#x9;&#x9;&#x9;return clone;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;#region ISerializable implementation&#xA;&#xA;&#x9;&#x9;protected IIteratorInstanceImpl(SerializationInfo si, StreamingContext context)  &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Option&lt;object>[] cs = (Option&lt;object>[]) si.GetValue(&quot;elements&quot;, (new Option&lt;object>[0]).GetType());&#xA;&#xA;&#x9;&#x9;&#x9;foreach (Option&lt;object> c in cs) &#xA;&#x9;&#x9;&#x9;&#x9;items.Enqueue (c);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public object ObjValue {&#xA;&#x9;&#x9;&#x9;get { return items; }&#xA;&#x9;&#x9;&#x9;set { this.items = (ConcurrentQueue&lt;Option&lt;object>>) value;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void GetObjectData (SerializationInfo info, StreamingContext context)  &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Option&lt;object>[] items_array = items.ToArray ();&#xA;&#x9;&#x9;&#x9;info.AddValue (&quot;elements&quot;, items_array, items_array.GetType ());&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;private ICloneable item_factory;&#xA;&#xA;&#x9;&#x9;public IIteratorInstanceImpl(ICloneable item_factory) { this.item_factory = item_factory; } &#xA;&#xA;&#x9;&#x9;public ICloneable createItem() &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;ICloneable r = (ICloneable) item_factory.Clone();&#xA;&#x9;&#x9;&#x9;// Trace.WriteLine (&quot;CREATE ITEM &quot; + r.GetType());&#xA;&#x9;&#x9;&#x9;return r;  &#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private is_empty_delegate is_empty_action = null;&#xA;&#xA;&#x9;&#x9;public is_empty_delegate IsEmptyAction { set { this.is_empty_action = value; } }&#xA;&#xA;&#x9;&#x9;[NonSerialized]&#xA;&#x9;&#x9;private ConcurrentQueue&lt;Option&lt;object>> items = new ConcurrentQueue&lt;Option&lt;object>>();&#xA;&#xA;&#x9;&#x9;readonly object not_empty = new object();&#xA;&#xA;&#x9;&#x9;public void put (object item)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;items.Enqueue(new Some&lt;object>(item));&#xA;&#xA;&#x9;&#x9;&#x9;lock (not_empty) { Monitor.Pulse(not_empty); }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;public void putAll (IIteratorInstance&lt;T> items)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;object item;&#xA;&#x9;&#x9;&#x9;while (items.fetch_next(out item)) put(item);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void finish ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.items.Enqueue(new None&lt;object>());&#xA;&#xA;&#x9;&#x9;&#x9;lock (not_empty) { Monitor.Pulse(not_empty); }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public bool fetch_next (out object result)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bool has_finished = false; //this.HasFinished;&#xA;&#xA;&#x9;&#x9;&#x9;result = null;&#xA;&#xA;&#x9;&#x9;&#x9;check_empty ();&#xA;&#xA;&#x9;&#x9;&#x9;Option&lt;object> item;&#xA;&#x9;&#x9;&#x9;items.TryDequeue(out item);&#xA;&#xA;&#x9;&#x9;&#x9;Trace.WriteLineIf(item == null, &quot;Item is NULL &quot; + this.GetHashCode());&#xA;&#xA;&#x9;&#x9;&#x9;if (item.IsNone) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;has_finished = true;&#xA;&#x9;&#x9;    }&#xA;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;result = item.Value;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;return !has_finished;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void check_empty()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;while (items.IsEmpty)&#xA;&#x9;&#x9;&#x9;&#x9;lock (not_empty) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (is_empty_action != null) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread (new ThreadStart (is_empty_action));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Monitor.Wait(not_empty); &#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public bool has_next()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;check_empty ();&#xA;&#xA;&#x9;&#x9;&#x9;Option&lt;object> item;&#xA;&#x9;&#x9;&#x9;items.TryPeek (out item);&#xA;&#x9;&#x9;&#x9;return item.IsSome;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;&#xA;// Used as return type from method&#xA;&#x9;[Serializable]&#xA;&#x9;public abstract class Option&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;// Could contain the value if Some, but not if None&#xA;&#x9;&#x9;public abstract T Value { get; }&#xA;&#xA;&#x9;&#x9;public abstract bool IsSome { get; }&#xA;&#xA;&#x9;&#x9;public abstract bool IsNone { get; }&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;[Serializable]&#xA;&#x9;public sealed class Some&lt;T> : Option&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;private T value;&#xA;&#x9;&#x9;public Some(T value)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Setting Some to null, nullifies the purpose of Some/None&#xA;&#x9;&#x9;&#x9;if (value == null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;throw new System.ArgumentNullException(&quot;value&quot;, &quot;Some value was null, use None instead&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;this.value = value;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public override T Value { get { return value; } }&#xA;&#xA;&#x9;&#x9;public override bool IsSome { get { return true; } }&#xA;&#xA;&#x9;&#x9;public override bool IsNone { get { return false; } }&#xA;&#x9;}&#xA;&#xA;&#x9;[Serializable]&#xA;&#x9;public sealed class None&lt;T> : Option&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;public override T Value&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get { throw new System.NotSupportedException(&quot;There is no value&quot;); }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public override bool IsSome { get { return false; } }&#xA;&#xA;&#x9;&#x9;public override bool IsNone { get { return true; } }&#xA;&#x9;}&#xA;&#xA;}&#xA;" name="IIteratorImpl.cs" srcType="user" uri="br.ufc.mdcc.common.impl.IteratorImpl/bin/1.0.0.0/IIteratorImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.Data/bin/1.0.0.0/IData.dll</dependency>
          <dependency>%WORKSPACE/br.ufc.mdcc.common.impl.IteratorImpl/bin/1.0.0.0/BaseIIteratorImpl.dll</dependency>
          <dependency>br.ufc.mdcc.common.Iterator/bin/1.0.0.0/IIterator.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="135" x="276" y="136">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <parameter iname="IData" order="0" parid="item_type" uname="data" varid="T"/>
    </interface>
    <unit facet="0" iRef="IIteratorImpl" multiple="false" private="false" replica="0" uRef="iterator" visibleInterface="true">
      <super cRef="base" uRef="iterator"/>
      <visualDescription h="40" w="80" x="320" y="450"/>
    </unit>
  </componentInfo>
</component:component>