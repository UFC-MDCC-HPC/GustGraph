<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000d351ef42e3af3a0df1d8a0dc76804ce167312b221695685341366395978221e3039a4d0655f988f808c9bdc9e947bce36c45294cd2913d17ef8f134856ac78023f4c5851625135c650c5b09d7665577257494ceb3b1c23256ecbb724598a6020efdd6828a85ea4616c9e96dff73c6f6391754d5bc87e0b78ba7638626d2dc4a2" isAbstract="false" kind="Data" name="DataContainerKVImpl" packagePath="br.ufc.mdcc.hpcshelf.gust.graph.container.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000e348b043a6ba6a513a33e6e22c07ca8e11114fc9241179314dc06282a27298c2ac8ee7337e8d514d12fc997480300369cdb5341714c658ef02f7b56a44e4b4cfa158476cff79a75ee278d9df2d3d83b753b7cc179dae517f7d1eadd5bfbf17c3f1c4359a2c2df22cb4a6402a9105a2c55d0c4202f1553293659a294a91bab2b3" localRef="base" location="br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerKV/DataContainerKV.hpe" name="DataContainerKV" package="br.ufc.mdcc.hpcshelf.gust.graph.container" version="1.0.0.0">
        <visualDescription h="60" w="100" x="377" y="512">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="vertex_type" varName="V"/>
        <parameter formFieldId="edge_type" varName="E"/>
        <port index_replica="0" localRef="vertex" location="br.ufc.mdcc.hpcshelf.gust.graph.Vertex/Vertex.hpe" multiple="false" name="Vertex" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="true">
          <visualDescription h="60" w="142" x="147" y="601">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <port index_replica="0" localRef="edgeFactory" location="br.ufc.mdcc.hpcshelf.gust.graph.Edge/Edge.hpe" multiple="false" name="Edge" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="true">
          <visualDescription h="60" w="161" x="554" y="580">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="vertex_type" varName="V"/>
          <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="data">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <innerComponent localRef="v" location="br.ufc.mdcc.hpcshelf.gust.graph.Vertex/Vertex.hpe" multiple="false" name="Vertex" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="true">
      <visualDescription h="60" w="142" x="147" y="601">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="e" location="br.ufc.mdcc.hpcshelf.gust.graph.Edge/Edge.hpe" multiple="false" name="Edge" package="br.ufc.mdcc.hpcshelf.gust.graph" exposed="true">
      <visualDescription h="60" w="161" x="554" y="580">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="vertex_type" varName="V"/>
      <unitBounds facet="0" facet_instance="0" parallel="false" uRef="data">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="v" direct="true" varName="V"/>
    <supplyParameter cRef="e" direct="true" varName="E"/>
    <interface iRef="IDataContainerKVImpl" nArgs="2">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerKV;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.graph.container.impl.DataContainerKVImpl &#xA;{&#xA;&#x9;public abstract class BaseIDataContainerKVImpl&lt;V, E>: DataStructure, BaseIDataContainerKV&lt;V, E>&#xA;&#x9;&#x9;where V:IVertex&#xA;&#x9;&#x9;where E:IEdge&lt;V>&#xA;&#x9;{&#xA;&#x9;&#x9;private E edgeFactory = default(E);&#xA;&#xA;&#x9;&#x9;public E EdgeFactory&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.edgeFactory == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.edgeFactory = (E) Services.getPort(&quot;edgeFactory&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.edgeFactory;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private V vertex = default(V);&#xA;&#xA;&#x9;&#x9;public V Vertex&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.vertex == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.vertex = (V) Services.getPort(&quot;vertex&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.vertex;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIDataContainerKVImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.gust.graph.container.impl.DataContainerKVImpl/bin/1.0.0.0/BaseIDataContainerKVImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Edge/bin/1.0.0.0/IEdge.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Vertex/bin/1.0.0.0/IVertex.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerKV/bin/1.0.0.0/BaseIDataContainerKV.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerKV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using System.Collections.Generic;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.graph.container.impl.DataContainerKVImpl&#xA;{&#xA;&#x9;public class IDataContainerKVImpl&lt;V, E> : BaseIDataContainerKVImpl&lt;V, E>, IDataContainerKV&lt;V, E>&#xA;where V:IVertex&#xA;where E:IEdge&lt;V> {&#xA;&#x9;&#x9;public IDataContainerKVImpl(){ }&#xA;&#x9;&#x9;override public void after_initialize () { &#xA;&#x9;&#x9;&#x9;newInstance (); &#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public object newInstance () {&#xA;&#x9;&#x9;&#x9;IVertexInstance v = (IVertexInstance) this.Vertex.newInstance ();&#xA;&#x9;&#x9;&#x9;IEdgeInstance&lt;V, int> e = (IEdgeInstance&lt;V, int>)this.EdgeFactory.newInstance ();&#xA;&#x9;&#x9;&#x9;instance = new IDataContainerKVInstanceImpl&lt;V, E, int, IEdgeInstance&lt;V, int>> (v.Id, e, 0);&#xA;&#x9;&#x9;&#x9;return instance;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private object instance;&#xA;&#x9;&#x9;public object Instance {&#xA;&#x9;&#x9;&#x9;get { return instance; }&#xA;&#x9;&#x9;&#x9;set { &#xA;&#x9;&#x9;&#x9;&#x9;IDataContainerInstance&lt;V, E> dc = (IDataContainerInstance&lt;V, E>)value;&#xA;&#x9;&#x9;&#x9;&#x9;dc.PartitionID = 0;&#xA;&#x9;&#x9;&#x9;&#x9;this.instance = dc;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IDataContainerKVInstance&lt;V, E, int, IEdgeInstance&lt;V, int>> DataContainerKVInstance {&#xA;&#x9;&#x9;&#x9;get { return (IDataContainerKVInstance&lt;V, E, int, IEdgeInstance&lt;V, int>>)instance; }&#xA;&#x9;&#x9;&#x9;set { &#xA;&#x9;&#x9;&#x9;&#x9;IDataContainerKVInstance&lt;V, E, int, IEdgeInstance&lt;V, int>> dc = (IDataContainerKVInstance&lt;V, E, int, IEdgeInstance&lt;V, int>>)value;&#xA;&#x9;&#x9;&#x9;&#x9;dc.PartitionID = 0;&#xA;&#x9;&#x9;&#x9;&#x9;this.instance = dc;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IDataContainerKVInstance&lt;V, E, TV, TE> InstanceTFactory&lt;TV, TE> (TE e) where TE:IEdgeInstance&lt;V, TV>{&#xA;&#x9;&#x9;&#x9;TE ei = (TE)this.EdgeFactory.InstanceTFactory&lt;TV>(e.Source,e.Target,e.Weight);&#xA;&#x9;&#x9;&#x9;IDataContainerKVInstance&lt;V, E, TV, TE> instanceT = new IDataContainerKVInstanceImpl&lt;V, E, TV, TE> (ei.Source, ei, 0); &#xA;&#x9;&#x9;&#x9;return instanceT;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;[Serializable]&#xA;&#x9;public class IDataContainerKVInstanceImpl&lt;V, E, TV, TE> : IDataContainerKVInstance&lt;V, E, TV, TE> &#xA;&#x9;&#x9;where V: IVertex &#xA;&#x9;&#x9;where E:IEdge&lt;V> &#xA;&#x9;&#x9;where TE: IEdgeInstance&lt;V, TV> {&#xA;&#xA;&#x9;&#x9;public IDataContainerKVInstanceImpl(){}&#xA;&#x9;&#x9;public IDataContainerKVInstanceImpl(TV v, TE e, int part){&#xA;&#x9;&#x9;&#x9;this.vertex = v;&#xA;&#x9;&#x9;&#x9;this.edgeFactory = e;&#xA;&#x9;&#x9;&#x9;partition_id = part;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#region ICloneable implementation&#xA;&#x9;&#x9;public object Clone () {&#xA;&#x9;&#x9;&#x9;IDataContainerKVInstanceImpl&lt;V, E, TV, TE> clone = new IDataContainerKVInstanceImpl&lt;V, E, TV, TE> ();&#xA;&#x9;&#x9;&#x9;Type[] types = this.GetType ().GenericTypeArguments;&#xA;&#x9;&#x9;&#x9;if (typeof(ICloneable).IsAssignableFrom (types [2]))&#xA;&#x9;&#x9;&#x9;&#x9;clone.Vertex = (TV)((ICloneable)vertex).Clone ();&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;clone.Vertex = vertex;&#xA;&#x9;&#x9;&#x9;clone.EdgeFactory = (TE)edgeFactory.Clone ();&#xA;&#x9;&#x9;&#x9;clone.PartitionID = partition_id;&#xA;&#x9;&#x9;&#x9;clone.AllowingLoops = _allowingLoops;&#xA;&#x9;&#x9;&#x9;clone.AllowingMultipleEdges = _allowingMultipleEdges;&#xA;&#x9;&#x9;&#x9;clone.DataSet =  new Dictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>> (dataSet);&#xA;&#x9;&#x9;&#x9;return (IDataContainerKVInstance&lt;V, E, TV, TE>) clone;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;#region IDataContainerKVInstance implementation&#xA;&#x9;&#x9;private TV vertex;&#xA;&#x9;&#x9;private TE edgeFactory;&#xA;&#x9;&#x9;private int partition_id = 0;&#xA;&#x9;&#x9;private bool _allowingLoops = true;&#xA;&#x9;&#x9;private bool _allowingMultipleEdges = false; &#xA;&#x9;&#x9;private IDictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>> dataSet; &#xA;&#xA;&#x9;&#x9;public TV Vertex { get { return vertex; } set { this.vertex = (TV)value; } }&#xA;&#x9;&#x9;public TE EdgeFactory { get { return edgeFactory; } set { this.edgeFactory = (TE)value; } }&#xA;&#x9;&#x9;public int PartitionID { get { return partition_id; } set { this.partition_id = value; } }&#xA;&#x9;&#x9;public bool AllowingLoops{ get { return _allowingLoops; } set{ _allowingLoops = value; } }&#xA;&#x9;&#x9;public bool AllowingMultipleEdges{ get { return _allowingMultipleEdges; } set{ _allowingMultipleEdges = value; } }&#xA;&#x9;&#x9;public IDictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>> DataSet { &#xA;&#x9;&#x9;&#x9;get { if (dataSet == null) dataSet = new Dictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>> (); return dataSet; } &#xA;&#x9;&#x9;&#x9;set { dataSet = (IDictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>>)value; }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public object ObjValue {&#xA;&#x9;&#x9;&#x9;get { return new Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>>>(vertex,edgeFactory,partition_id,_allowingLoops,_allowingMultipleEdges,dataSet); }&#xA;&#x9;&#x9;&#x9;set { &#xA;&#x9;&#x9;&#x9;&#x9;this.vertex =                 ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>>>)value).Item1;&#xA;&#x9;&#x9;&#x9;&#x9;this.edgeFactory =            ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>>>)value).Item2;&#xA;&#x9;&#x9;&#x9;&#x9;this.partition_id =          ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>>>)value).Item3;&#xA;&#x9;&#x9;&#x9;&#x9;this._allowingLoops =         ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>>>)value).Item4;&#xA;&#x9;&#x9;&#x9;&#x9;this._allowingMultipleEdges = ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>>>)value).Item5;&#xA;&#x9;&#x9;&#x9;&#x9;this.dataSet =            ((Tuple&lt;TV,TE, int, bool, bool, IDictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>>>)value).Item6;&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public void newDataSet (int size) {&#xA;&#x9;&#x9;&#x9;dataSet = new Dictionary&lt;TV, IEdgeContainer&lt;KeyValuePair&lt;TV, float>>> (size);&#xA;&#x9;&#x9;}&#xA;//&#x9;&#x9;public override bool Equals (object obj) {&#xA;//&#x9;&#x9;&#x9;if (typeof(IDataContainerKVInstance&lt;V, E, TV, TE>).IsAssignableFrom (obj.GetType ())) {&#xA;//&#x9;&#x9;&#x9;&#x9;IDataContainerKVInstance&lt;V, E, TV, TE> o = (IDataContainerKVInstance&lt;V, E, TV, TE>)obj;&#xA;//&#x9;&#x9;&#x9;&#x9;if (o.PartitionID == this.PartitionID)&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;return true;&#xA;//&#x9;&#x9;&#x9;}&#xA;//&#x9;&#x9;&#x9;return false;&#xA;//&#x9;&#x9;}&#xA;//&#x9;&#x9;public override int GetHashCode () { return partition_id; }&#xA;&#x9;&#x9;#endregion&#xA;&#x9;}&#xA;}&#xA;" name="IDataContainerKVImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.gust.graph.container.impl.DataContainerKVImpl/bin/1.0.0.0/IDataContainerKVImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Vertex/bin/1.0.0.0/IVertex.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Edge/bin/1.0.0.0/IEdge.dll</dependency>
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.gust.graph.container.impl.DataContainerKVImpl/bin/1.0.0.0/BaseIDataContainerKVImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerKV/bin/1.0.0.0/IDataContainerKV.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="216" x="139" y="316">
        <color b="52" g="226" r="138"/>
      </visualDescription>
      <parameter iname="IEdge" order="1" parid="edge_type" uname="data" varid="E"/>
      <parameter iname="IVertex" order="0" parid="vertex_type" uname="data" varid="V"/>
    </interface>
    <unit facet="0" iRef="IDataContainerKVImpl" multiple="false" private="false" replica="0" uRef="data" visibleInterface="true">
      <super cRef="base" uRef="data"/>
      <visualDescription h="40" w="80" x="289" y="411"/>
    </unit>
  </componentInfo>
</component:component>