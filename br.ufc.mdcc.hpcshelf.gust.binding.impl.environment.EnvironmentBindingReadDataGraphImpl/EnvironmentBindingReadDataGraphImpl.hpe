<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000000d904c4aa2da1dcb42126421d3882432650153dcb5f01dca95dc56525a8cc3182874275f0edc1e07e69073b9dba279138c22ed04fbd849dc4e00f3ac69e35eb4c79c7786ea52c99b37c62a4b993113b0571f7eb91f5cee1b942d5cd9d40cb5d790e9eecdab3b5e524299606f0491eaa7a20888cad40e005f7225b85a3e0860c1" isAbstract="false" kind="Synchronizer" name="EnvironmentBindingReadDataGraphImpl" packagePath="br.ufc.mdcc.hpcshelf.gust.binding.impl.environment">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="00240000048000009400000006020000002400005253413100040000110000002f236009361c107cdc1ccc3e1e8572538284b69199420787475646a0f918848e9b6c74a11a85c1488b160f3893694568d4d734640348ab64cfdadc982b4f22272b71b357d15b503204d4073d8e45330e68f3cabb6ea1cab9d845abfa9ef374e1b9d885c90abcfb38cd452f2e5ba64b659e7095c8b0ed245eb35f6bffb1a3b28e" localRef="base" location="br.ufc.mdcc.hpcshelf.gust.binding.environment.EnvironmentBindingReadDataGraph/EnvironmentBindingReadDataGraph.hpe" name="EnvironmentBindingReadDataGraph" package="br.ufc.mdcc.hpcshelf.gust.binding.environment" version="1.0.0.0">
        <visualDescription h="60" w="132" x="289" y="458">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="server_port_type" varName="S"/>
        <unitBounds facet="0" facet_instance="0" facet_instance_enclosing="0" parallel="false" uRef="client_server">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
    <facet_configuration facet="0" multiple="false"/>
  </header>
  <componentInfo>
    <innerComponent localRef="s" location="br.ufc.mdcc.hpcshelf.gust.port.environment.PortTypeDataSourceGraphInterface/PortTypeDataSourceGraphInterface.hpe" multiple="false" name="PortTypeDataSourceGraphInterface" package="br.ufc.mdcc.hpcshelf.gust.port.environment" exposed="false">
      <visualDescription h="60" w="100" x="512" y="453">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="c" location="br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator/PortTypeIterator.hpe" multiple="false" name="PortTypeIterator" package="br.ufc.mdcc.hpcshelf.mapreduce.port.environment" exposed="false">
      <visualDescription h="60" w="100" x="484" y="290">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds facet="0" facet_instance="0" parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="s" direct="true" varName="S"/>
    <supplyParameter cRef="c" direct="true" varName="C"/>
    <interface iRef="IReadDataGraphImpl" nArgs="1">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using br.ufc.mdcc.hpcshelf.gust.binding.environment.EnvironmentBindingReadDataGraph;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBaseDirect;&#xA;using br.ufc.mdcc.hpcshelf.gust.port.environment.PortTypeDataSourceGraphInterface;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.binding.impl.environment.EnvironmentBindingReadDataGraphImpl&#xA;{&#xA;&#x9;public abstract class BaseIReadDataGraphImpl&lt;S>: Synchronizer, BaseIReadDataGraph&lt;S>&#xA;&#x9;&#x9;//where C:IPortTypeIterator&#xA;&#x9;&#x9;where S:IPortTypeDataSourceGraphInterface&#xA;&#x9;{&#xA;&#x9;&#x9;private IPortTypeIterator client_port_type = null;&#xA;&#x9;&#x9;protected IPortTypeIterator Client_port_type&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.client_port_type == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.client_port_type = (IPortTypeIterator) Services.getPort(&quot;client_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.client_port_type;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private S server_port_type = default(S);&#xA;&#x9;&#x9;protected S Server_port_type&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.server_port_type == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.server_port_type = (S) Services.getPort(&quot;server_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.server_port_type;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIReadDataGraphImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.gust.binding.impl.environment.EnvironmentBindingReadDataGraphImpl/bin/1.0.0.0/BaseIReadDataGraphImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/IEnvironmentPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.binding.environment.EnvironmentBindingReadDataGraph/bin/1.0.0.0/BaseIReadDataGraph.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpcshelf.gust.binding.environment.EnvironmentBindingReadDataGraph;//&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBase;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeIterator;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.environment.PortTypeDataSourceInterface;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingBaseDirect;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.common.String;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using System.Threading;&#xA;using System.Collections.Generic;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.binding.impl.environment.EnvironmentBindingReadDataGraphImpl&#xA;{&#xA;&#x9;public class IReadDataGraphImpl&lt;S>: BaseIReadDataGraphImpl&lt;S>, IReadDataGraph&lt;S>&#xA;&#x9;&#x9;where S:IPortTypeDataSourceInterface&#xA;&#x9;{&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private Thread thread_file_reader = null;&#xA;&#xA;&#x9;&#x9;public override void after_initialize()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;client = Input_pairs_iterator.newIteratorInstance ();&#xA;&#x9;&#x9;&#x9;client.IsEmptyAction = ask_for_next_item;&#xA;&#x9;&#x9;&#x9;startReadSource ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void ask_for_next_item()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;e.Set ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;AutoResetEvent e = new AutoResetEvent(false);&#xA;&#x9;&#x9;AutoResetEvent server_ok = new AutoResetEvent(false);&#xA;&#xA;&#x9;&#x9;public void startReadSource()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;thread_file_reader = new Thread (file_reader);&#xA;&#x9;&#x9;&#x9;thread_file_reader.Start ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IPortTypeIterator client = null;&#xA;&#x9;&#x9;public IPortTypeIterator Client { get {&#x9;return client; } }&#xA;&#xA;&#x9;&#x9;private S server = default(S);&#xA;&#x9;&#x9;public S Server { set {&#x9;server = value; server_ok.Set (); } }&#xA;&#xA;&#x9;&#x9;private static int CHUNK_SIZE = 50;&#xA;&#xA;&#x9;&#x9;private string[] file_name_list = null;&#xA;&#xA;&#x9;&#x9;int counter_write_chunk = 0;&#xA;&#x9;&#x9;int counter_write_global = 0;&#xA;&#xA;&#x9;&#x9;private void file_reader()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;server_ok.WaitOne ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;STARTING FILE READER - FETCHING NAMES&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;if (file_name_list == null)&#xA;&#x9;&#x9;&#x9;&#x9;file_name_list = server.fetchFileNames ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;STARTING FILE READER - ENTER READING FILES&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;foreach (string fn in file_name_list)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;FILE READER - READING FILE {0}&quot;, fn);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IEnumerable&lt;string> file_line_list = server.fetchFileContents (fn);&#xA;&#x9;&#x9;&#x9;&#x9;foreach (string line in file_line_list)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.WaitOne ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;FILE READER - READING LINE {0} of FILE {1}&quot;, fn, line);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IString> item = (IKVPairInstance&lt;IInteger,IString>) client.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;((IIntegerInstance)item.Key).Value = counter_write_global;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;((IStringInstance)item.Value).Value = line;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;client.put(item);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;counter_write_chunk++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;counter_write_global++;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (counter_write_chunk >= CHUNK_SIZE)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;NEW CHUNK size=&quot; + counter_write_chunk);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;counter_write_chunk = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;client.finish ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;// CLOSE THE LAST CHUNK.&#xA;&#x9;&#x9;&#x9;if (counter_write_chunk > 0)&#xA;&#x9;&#x9;&#x9;&#x9;client.finish ();&#xA;&#xA;&#x9;&#x9;&#x9;// SEND ITERATION TERMINATION CHUNK.&#xA;&#x9;&#x9;&#x9;client.finish ();&#xA;&#xA;&#x9;&#x9;&#x9;// SEND COMPUTATION TERMINATION CHUNK.&#xA;&#x9;&#x9;&#x9;client.finish ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;FINISHING READING DATA SOURCE&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="IReadDataGraphImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.gust.binding.impl.environment.EnvironmentBindingReadDataGraphImpl/bin/1.0.0.0/IReadDataGraphImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.gust.binding.impl.environment.EnvironmentBindingReadDataGraphImpl/bin/1.0.0.0/BaseIReadDataGraphImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.binding.environment.EnvironmentBindingReadDataGraph/bin/1.0.0.0/IReadDataGraph.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="257" x="106" y="288">
        <color b="0" g="0" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IReadDataGraphImpl" multiple="false" private="false" replica="0" uRef="client_server" visibleInterface="true">
      <super cRef="base" uRef="client_server"/>
      <visualDescription h="40" w="200" x="174" y="367"/>
    </unit>
  </componentInfo>
</component:component>